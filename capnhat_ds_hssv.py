# chyen_danhsach_hssv.py
import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
from gspread_dataframe import set_with_dataframe

# --- C√ÅC H√ÄM K·∫æT N·ªêI V√Ä ƒê·ªåC GOOGLE SHEETS ---

@st.cache_resource
def connect_to_gsheet():
    """
    K·∫øt n·ªëi t·ªõi Google Sheets s·ª≠ d·ª•ng Service Account credentials t·ª´ st.secrets.
    """
    try:
        creds_dict = st.secrets["gcp_service_account"]
        creds = Credentials.from_service_account_info(
            creds_dict,
            scopes=["https://www.googleapis.com/auth/spreadsheets"],
        )
        client = gspread.authorize(creds)
        return client
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi Google Sheets: {e}")
        return None

# --- H√ÄM X·ª¨ L√ù D·ªÆ LI·ªÜU EXCEL (ƒê√É C·∫¨P NH·∫¨T) ---

def find_start_cell(df_raw):
    """T√¨m d√≤ng v√† c·ªôt b·∫Øt ƒë·∫ßu c·ªßa kh·ªëi d·ªØ li·ªáu b·∫±ng c√°ch ƒë·ªãnh v·ªã cell 'STT'."""
    for r_idx, row in df_raw.iterrows():
        for c_idx, cell in enumerate(row):
            if str(cell).strip().lower() == 'stt':
                return r_idx, c_idx
    return None, None

def process_student_excel(excel_file):
    """
    ƒê·ªçc file Excel, tr√≠ch xu·∫•t d·ªØ li·ªáu sinh vi√™n d·ª±a tr√™n c√°c ƒëi·ªÉm ƒë√°nh d·∫•u b·∫Øt ƒë·∫ßu/k·∫øt th√∫c c·ª• th·ªÉ,
    v√† h·ª£p nh·∫•t d·ªØ li·ªáu t·ª´ t·∫•t c·∫£ c√°c sheet.
    """
    try:
        xls = pd.ExcelFile(excel_file)
        all_sheets_data = []

        # C√°c c·ªôt m·ª•c ti√™u trong Google Sheet
        target_gsheet_columns = [
            'STT', 'L·ªõp', 'H·ªç v√† t√™n', 'NƒÉm sinh', 'Gi·ªõi t√≠nh', 'D√¢n t·ªôc', 'T√¥n gi√°o', 
            'N∆°i sinh', 'Th√¥n', 'X√£', 'Huy·ªán', 'T·ªânh', 'SƒêT', 'Ghi ch√∫'
        ]

        for sheet_name in xls.sheet_names:
            df_raw = pd.read_excel(xls, sheet_name=sheet_name, header=None)
            
            start_row, start_col = find_start_cell(df_raw)
            
            if start_row is None:
                st.warning(f"Kh√¥ng t√¨m th·∫•y header (cell 'STT') trong sheet '{sheet_name}'. B·ªè qua sheet n√†y.")
                continue

            # Tr√≠ch xu·∫•t header t·ª´ d√≤ng ƒë√£ x√°c ƒë·ªãnh
            headers = [str(h).strip() for h in df_raw.iloc[start_row, :]]
            
            # T√¨m c·ªôt k·∫øt th√∫c d·ª±a tr√™n 'Ghi ch√∫'
            try:
                # T√¨m v·ªã tr√≠ cu·ªëi c√πng c·ªßa 'Ghi ch√∫' ƒë·ªÉ ƒë·∫£m b·∫£o l·∫•y h·∫øt d·ªØ li·ªáu
                end_col_index = len(headers) - 1 - headers[::-1].index('Ghi ch√∫')
            except ValueError:
                st.warning(f"Kh√¥ng t√¨m th·∫•y c·ªôt 'Ghi ch√∫' trong sheet '{sheet_name}'. B·ªè qua sheet n√†y.")
                continue
            
            # Tr√≠ch xu·∫•t kh·ªëi d·ªØ li·ªáu (t·ª´ d√≤ng sau header)
            df = df_raw.iloc[start_row + 1:, start_col : end_col_index + 1]
            # G√°n header ch√≠nh x√°c
            df.columns = headers[start_col : end_col_index + 1]

            # *** PH·∫¶N S·ª¨A L·ªñI: Lo·∫°i b·ªè c√°c c·ªôt b·ªã tr√πng t√™n, ch·ªâ gi·ªØ l·∫°i c·ªôt ƒë·∫ßu ti√™n ***
            df = df.loc[:, ~df.columns.duplicated(keep='first')]

            # X√°c ƒë·ªãnh d√≤ng k·∫øt th√∫c d·ª±a tr√™n c·ªôt 'H·ªç v√† t√™n'
            if 'H·ªç v√† t√™n' not in df.columns:
                 st.warning(f"Kh√¥ng t√¨m th·∫•y c·ªôt 'H·ªç v√† t√™n' trong sheet '{sheet_name}'. B·ªè qua sheet n√†y.")
                 continue

            end_row_marker = -1
            # Chuy·ªÉn c·ªôt sang list ƒë·ªÉ duy·ªát nhanh h∆°n
            ho_ten_list = df['H·ªç v√† t√™n'].tolist()
            for i, value in enumerate(ho_ten_list):
                # D·ª´ng l·∫°i n·∫øu cell tr·ªëng, NaN, ho·∫∑c l√† m·ªôt s·ªë
                if pd.isna(value) or str(value).strip() == '' or isinstance(value, (int, float)):
                    end_row_marker = i
                    break
            
            # C·∫Øt DataFrame ƒë·∫øn ƒë√∫ng s·ªë d√≤ng
            if end_row_marker != -1:
                df = df.iloc[:end_row_marker]

            # B·ªè c√°c d√≤ng kh√¥ng c√≥ STT (th∆∞·ªùng l√† c√°c d√≤ng tr·ªëng)
            df.dropna(subset=['STT'], inplace=True)

            if df.empty:
                continue

            # Th√™m c·ªôt 'L·ªõp'
            df.insert(1, 'L·ªõp', sheet_name)
            
            all_sheets_data.append(df)

        if not all_sheets_data:
            st.error("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá n√†o ƒë∆∞·ª£c t√¨m th·∫•y trong file Excel.")
            return None

        # G·ªôp d·ªØ li·ªáu t·ª´ t·∫•t c·∫£ c√°c sheet
        combined_df = pd.concat(all_sheets_data, ignore_index=True)
        
        # T·∫°o m·ªôt DataFrame cu·ªëi c√πng v·ªõi c·∫•u tr√∫c c·ªôt c·ªßa Google Sheet
        final_df = pd.DataFrame()
        
        # √Ånh x·∫° c√°c c·ªôt t·ª´ d·ªØ li·ªáu ƒë√£ tr√≠ch xu·∫•t sang c√°c c·ªôt m·ª•c ti√™u
        for col in target_gsheet_columns:
            if col in combined_df.columns:
                final_df[col] = combined_df[col]
            else:
                # Th√™m c·ªôt b·ªã thi·∫øu v·ªõi gi√° tr·ªã tr·ªëng
                final_df[col] = None
        
        # ƒê·∫£m b·∫£o th·ª© t·ª± c·ªôt l√† ch√≠nh x√°c
        final_df = final_df[target_gsheet_columns]
        
        return final_df

    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω file Excel: {e}")
        return None

# --- H√ÄM T·∫¢I D·ªÆ LI·ªÜU L√äN GOOGLE SHEET ---
def upload_to_gsheet(client, spreadsheet_id, worksheet_name, df):
    """
    T·∫£i DataFrame l√™n m·ªôt worksheet c·ª• th·ªÉ, x√≥a d·ªØ li·ªáu c≈© tr∆∞·ªõc.
    """
    try:
        spreadsheet = client.open_by_key(spreadsheet_id)
        worksheet = spreadsheet.worksheet(worksheet_name)
        
        st.write(f"ƒêang x√≥a d·ªØ li·ªáu c≈© trong sheet '{worksheet_name}'...")
        worksheet.clear()
        
        st.write(f"ƒêang t·∫£i d·ªØ li·ªáu m·ªõi l√™n sheet '{worksheet_name}'...")
        # S·ª≠ d·ª•ng gspread-dataframe ƒë·ªÉ t·∫£i l√™n d·ªÖ d√†ng
        set_with_dataframe(worksheet, df)
        
        return True
    except gspread.exceptions.WorksheetNotFound:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y sheet c√≥ t√™n '{worksheet_name}' trong Google Sheet c·ªßa b·∫°n.")
        return False
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu l√™n Google Sheets: {e}")
        return False

# --- GIAO DI·ªÜN ·ª®NG D·ª§NG STREAMLIT ---

st.set_page_config(page_title="Chuy·ªÉn Danh s√°ch HSSV", layout="wide")
st.title("üöÄ C√¥ng c·ª• Chuy·ªÉn Danh s√°ch HSSV t·ª´ Excel v√†o Google Sheet")
st.markdown("---")

# --- C·∫§U H√åNH ---
st.header("B∆∞·ªõc 1: C·∫•u h√¨nh Google Sheet")
SPREADSHEET_ID = st.text_input(
    "Nh·∫≠p ID c·ªßa Google Sheet (DA_TA)",
    "1TJfaywQM1VNGjDbWyC3osTLLOvlgzP0-bQjz8J-_BoI" # C√≥ th·ªÉ thay ID m·∫∑c ƒë·ªãnh ·ªü ƒë√¢y
)
WORKSHEET_NAME = "DANHSACH_HSSV"
st.info(f"D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c ghi v√†o sheet c√≥ t√™n l√†: **{WORKSHEET_NAME}**")
st.markdown("---")

# --- T·∫¢I FILE V√Ä X·ª¨ L√ù ---
st.header("B∆∞·ªõc 2: T·∫£i l√™n v√† X·ª≠ l√Ω")
uploaded_excel_file = st.file_uploader(
    "üìÇ T·∫£i l√™n File Excel ch·ª©a danh s√°ch h·ªçc sinh",
    type=['xlsx']
)

if uploaded_excel_file and SPREADSHEET_ID:
    if st.button("‚ö° Chuy·ªÉn d·ªØ li·ªáu ngay", type="primary", use_container_width=True):
        with st.spinner("ƒêang k·∫øt n·ªëi v·ªõi Google Sheets..."):
            gsheet_client = connect_to_gsheet()
        
        if gsheet_client:
            st.success("‚úÖ K·∫øt n·ªëi Google Sheets th√†nh c√¥ng!")
            
            with st.spinner("ƒêang x·ª≠ l√Ω file Excel..."):
                final_df = process_student_excel(uploaded_excel_file)
            
            if final_df is not None:
                st.success("‚úÖ X·ª≠ l√Ω file Excel ho√†n t·∫•t!")
                st.write("Xem tr∆∞·ªõc 5 d√≤ng d·ªØ li·ªáu ƒë√£ t·ªïng h·ª£p:")
                st.dataframe(final_df.head())
                
                with st.spinner(f"ƒêang t·∫£i {len(final_df)} d√≤ng d·ªØ li·ªáu l√™n Google Sheets..."):
                    success = upload_to_gsheet(gsheet_client, SPREADSHEET_ID, WORKSHEET_NAME, final_df)
                
                if success:
                    st.balloons()
                    st.success(f"üéâ Chuy·ªÉn d·ªØ li·ªáu th√†nh c√¥ng! To√†n b·ªô {len(final_df)} h·ªçc sinh ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√†o Google Sheet.")
