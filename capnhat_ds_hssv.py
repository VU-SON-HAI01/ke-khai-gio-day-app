# chyen_danhsach_hssv.py
import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
from gspread_dataframe import set_with_dataframe
import re

# --- C√ÅC H√ÄM K·∫æT N·ªêI V√Ä ƒê·ªåC GOOGLE SHEETS ---

@st.cache_resource
def connect_to_gsheet():
    """
    K·∫øt n·ªëi t·ªõi Google Sheets s·ª≠ d·ª•ng Service Account credentials t·ª´ st.secrets.
    """
    try:
        creds_dict = st.secrets["gcp_service_account"]
        creds = Credentials.from_service_account_info(
            creds_dict,
            scopes=["https://www.googleapis.com/auth/spreadsheets"],
        )
        client = gspread.authorize(creds)
        return client
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi Google Sheets: {e}")
        return None

def get_valid_classes_from_gsheet(client, spreadsheet_id):
    """
    L·∫•y danh s√°ch c√°c l·ªõp h·ªçc h·ª£p l·ªá t·ª´ sheet 'DANH_MUC' b·∫±ng c√°ch t·ª± ƒë·ªông t√¨m c·ªôt 'L·ªõp h·ªçc'.
    """
    try:
        spreadsheet = client.open_by_key(spreadsheet_id)
        worksheet = spreadsheet.worksheet("DANH_MUC")
        
        headers = worksheet.row_values(1) 
        try:
            class_col_index = headers.index('L·ªõp h·ªçc') + 1
        except ValueError:
            st.error("L·ªói: Kh√¥ng t√¨m th·∫•y c·ªôt c√≥ t√™n 'L·ªõp h·ªçc' trong sheet 'DANH_MUC'. Vui l√≤ng ki·ªÉm tra l·∫°i header.")
            return None

        class_list = worksheet.col_values(class_col_index)[1:] 
        valid_classes = {str(c).strip() for c in class_list if str(c).strip()}
        if not valid_classes:
            st.warning("C·ªôt 'L·ªõp h·ªçc' trong sheet 'DANH_MUC' kh√¥ng c√≥ d·ªØ li·ªáu.")
            
        return valid_classes
        
    except gspread.exceptions.WorksheetNotFound:
        st.error("L·ªói: Kh√¥ng t√¨m th·∫•y sheet 'DANH_MUC' trong Google Sheet.")
        return None
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc danh s√°ch l·ªõp t·ª´ Google Sheet: {e}")
        return None

# --- H√ÄM X·ª¨ L√ù D·ªÆ LI·ªÜU EXCEL ---

def find_start_cell(df_raw):
    """T√¨m d√≤ng v√† c·ªôt b·∫Øt ƒë·∫ßu c·ªßa kh·ªëi d·ªØ li·ªáu b·∫±ng c√°ch ƒë·ªãnh v·ªã cell 'STT' trong 11 d√≤ng ƒë·∫ßu."""
    # Ch·ªâ qu√©t 11 d√≤ng ƒë·∫ßu ti√™n
    for r_idx, row in df_raw.head(11).iterrows():
        for c_idx, cell in enumerate(row):
            if str(cell).strip().lower() == 'stt':
                return r_idx, c_idx
    return None, None

def process_student_excel(excel_file, sheets_to_process):
    """
    ƒê·ªçc file Excel, tr√≠ch xu·∫•t, x·ª≠ l√Ω v√† h·ª£p nh·∫•t d·ªØ li·ªáu sinh vi√™n.
    """
    try:
        xls = pd.ExcelFile(excel_file)
        all_sheets_data = []

        target_gsheet_columns = [
            'STT', 'L·ªõp', 'H·ªç ƒë·ªám', 'T√™n', 'NƒÉm sinh', 'Gi·ªõi t√≠nh', 'D√¢n t·ªôc', 'T√¥n gi√°o', 
            'N∆°i sinh', 'Th√¥n', 'X√£', 'Huy·ªán', 'T·ªânh', 'SƒêT', 'Ghi ch√∫'
        ]

        for sheet_name in sheets_to_process:
            df_raw = pd.read_excel(xls, sheet_name=sheet_name, header=None)
            start_row, start_col = find_start_cell(df_raw)
            
            if start_row is None:
                st.warning(f"Kh√¥ng t√¨m th·∫•y header (cell 'STT') trong 11 d√≤ng ƒë·∫ßu c·ªßa sheet '{sheet_name}'. B·ªè qua.")
                continue

            header_list = df_raw.iloc[start_row].tolist()
            final_headers = [str(h).strip() for h in header_list]

            try:
                end_col_index = final_headers.index('Ghi ch√∫')
            except ValueError:
                st.warning(f"Kh√¥ng t√¨m th·∫•y c·ªôt 'Ghi ch√∫' trong header c·ªßa sheet '{sheet_name}'. B·ªè qua.")
                continue
            
            if start_col == 0:
                final_headers[start_col + 1] = "H·ªç ƒë·ªám"
                final_headers[start_col + 2] = "T√™n"
            
            try:
                hokhau_index = [h.lower() for h in final_headers].index('h·ªô kh·∫©u th∆∞·ªùng tr√∫')
                final_headers[hokhau_index] = "Th√¥n"
                final_headers[hokhau_index + 1] = "X√£"
                final_headers[hokhau_index + 2] = "Huy·ªán"
                final_headers[hokhau_index + 3] = "T·ªânh"
            except ValueError:
                pass 

            df = df_raw.iloc[start_row + 1:, start_col : end_col_index + 1]
            df.columns = final_headers[start_col : end_col_index + 1]
            df = df.loc[:, ~df.columns.duplicated(keep='first')]

            termination_col_name = "T√™n" if start_col == 0 and "T√™n" in df.columns else None
            if not termination_col_name:
                st.warning(f"Kh√¥ng th·ªÉ x√°c ƒë·ªãnh c·ªôt T√™n ƒë·ªÉ t√¨m ƒëi·ªÉm k·∫øt th√∫c trong sheet '{sheet_name}'.")
                continue

            end_row_marker = -1
            termination_list = df[termination_col_name].tolist()
            for i, value in enumerate(termination_list):
                if pd.isna(value) or str(value).strip() == '' or isinstance(value, (int, float)):
                    end_row_marker = i
                    break
            
            if end_row_marker != -1:
                df = df.iloc[:end_row_marker]

            df.dropna(subset=['STT'], inplace=True)
            if df.empty: continue

            df.insert(1, 'L·ªõp', sheet_name)
            all_sheets_data.append(df)

        if not all_sheets_data:
            st.error("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá n√†o ƒë∆∞·ª£c t√¨m th·∫•y trong c√°c sheet ƒë√£ ch·ªçn.")
            return None

        combined_df = pd.concat(all_sheets_data, ignore_index=True)
        
        # *** PH·∫¶N ƒê∆Ø·ª¢C C·∫¨P NH·∫¨T: Logic ƒë·ªãnh d·∫°ng NƒÉm sinh m·ªõi ***
        if 'NƒÉm sinh' in combined_df.columns:
            def format_dob(date_value):
                if pd.isna(date_value) or str(date_value).strip() == '':
                    return ''
                try:
                    # C·ªë g·∫Øng chuy·ªÉn ƒë·ªïi th√†nh ƒë·ªëi t∆∞·ª£ng datetime
                    dt_object = pd.to_datetime(date_value)
                    # N·∫øu th√†nh c√¥ng, ƒë·ªãnh d·∫°ng l·∫°i theo chu·∫©n dd/mm/yyyy
                    return dt_object.strftime('%d/%m/%Y')
                except (ValueError, TypeError):
                    # N·∫øu l·ªói, tr·∫£ v·ªÅ gi√° tr·ªã g·ªëc d·∫°ng chu·ªói
                    return str(date_value).strip()

            combined_df['NƒÉm sinh'] = combined_df['NƒÉm sinh'].apply(format_dob)

        phone_col_name = None
        if 'SƒêT' in combined_df.columns:
            phone_col_name = 'SƒêT'
        elif 'Tel' in combined_df.columns:
            phone_col_name = 'Tel'

        if phone_col_name:
            def format_phone_number(phone):
                if pd.isna(phone):
                    return ''
                digits = re.sub(r'\D', '', str(phone))
                
                if len(digits) == 9 and not digits.startswith('0'):
                    digits = '0' + digits
                
                if len(digits) == 10 and digits.startswith('0'):
                    return f"{digits[:3]}.{digits[3:6]}.{digits[6:]}"
                
                return digits

            combined_df[phone_col_name] = combined_df[phone_col_name].apply(format_phone_number)
            
            if phone_col_name == 'Tel':
                combined_df.rename(columns={'Tel': 'SƒêT'}, inplace=True)

        final_df = pd.DataFrame()
        for col in target_gsheet_columns:
            if col in combined_df.columns:
                final_df[col] = combined_df[col]
            else:
                final_df[col] = None
        
        final_df = final_df[target_gsheet_columns]
        return final_df

    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω file Excel: {e}")
        return None

# --- H√ÄM T·∫¢I D·ªÆ LI·ªÜU L√äN GOOGLE SHEET ---
def upload_to_gsheet(client, spreadsheet_id, worksheet_name, df):
    """
    T·∫£i DataFrame l√™n m·ªôt worksheet c·ª• th·ªÉ, x√≥a d·ªØ li·ªáu c≈© tr∆∞·ªõc.
    """
    try:
        spreadsheet = client.open_by_key(spreadsheet_id)
        worksheet = spreadsheet.worksheet(worksheet_name)
        
        st.write(f"ƒêang x√≥a d·ªØ li·ªáu c≈© trong sheet '{worksheet_name}'...")
        worksheet.clear()
        
        st.write(f"ƒêang t·∫£i d·ªØ li·ªáu m·ªõi l√™n sheet '{worksheet_name}'...")
        df_str = df.astype(str)
        set_with_dataframe(worksheet, df_str)
        
        return True
    except gspread.exceptions.WorksheetNotFound:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y sheet c√≥ t√™n '{worksheet_name}' trong Google Sheet c·ªßa b·∫°n.")
        return False
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu l√™n Google Sheets: {e}")
        return False

# --- GIAO DI·ªÜN ·ª®NG D·ª§NG STREAMLIT ---

st.set_page_config(page_title="Chuy·ªÉn Danh s√°ch HSSV", layout="wide")
st.title("üöÄ C√¥ng c·ª• Chuy·ªÉn Danh s√°ch HSSV t·ª´ Excel v√†o Google Sheet")
st.markdown("---")

# --- C·∫§U H√åNH ---
st.header("B∆∞·ªõc 1: C·∫•u h√¨nh Google Sheet")
SPREADSHEET_ID = st.text_input(
    "Nh·∫≠p ID c·ªßa Google Sheet (DA_TA)",
    "1TJfaywQM1VNGjDbWyC3osTLLOvlgzP0-bQjz8J-_BoI" 
)
WORKSHEET_NAME = "DANHSACH_HSSV"
st.info(f"D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c ghi v√†o sheet c√≥ t√™n l√†: **{WORKSHEET_NAME}**")
st.markdown("---")

# --- T·∫¢I FILE V√Ä X·ª¨ L√ù ---
st.header("B∆∞·ªõc 2: T·∫£i l√™n v√† X·ª≠ l√Ω")
uploaded_excel_file = st.file_uploader(
    "üìÇ T·∫£i l√™n File Excel ch·ª©a danh s√°ch h·ªçc sinh",
    type=['xlsx']
)

if uploaded_excel_file and SPREADSHEET_ID:
    if st.button("‚ö° Ki·ªÉm tra v√† Chuy·ªÉn d·ªØ li·ªáu", type="primary", use_container_width=True):
        with st.spinner("ƒêang k·∫øt n·ªëi v·ªõi Google Sheets..."):
            gsheet_client = connect_to_gsheet()
        
        if gsheet_client:
            st.success("‚úÖ K·∫øt n·ªëi Google Sheets th√†nh c√¥ng!")
            
            with st.spinner("ƒêang ki·ªÉm tra t√™n c√°c sheet..."):
                valid_classes = get_valid_classes_from_gsheet(gsheet_client, SPREADSHEET_ID)
                if valid_classes is not None:
                    uploaded_sheets = set(pd.ExcelFile(uploaded_excel_file).sheet_names)
                    
                    mismatched_sheets = uploaded_sheets - valid_classes
                    sheets_to_process = list(uploaded_sheets.intersection(valid_classes))

                    if mismatched_sheets:
                        st.warning(f"‚ö†Ô∏è C√°c sheet sau kh√¥ng c√≥ trong danh m·ª•c v√† s·∫Ω b·ªã b·ªè qua:")
                        st.json(list(mismatched_sheets))
                    
                    if not sheets_to_process:
                        st.error("Kh√¥ng c√≥ sheet n√†o trong file Excel kh·ªõp v·ªõi danh m·ª•c l·ªõp h·ªçc. D·ª´ng x·ª≠ l√Ω.")
                        st.stop()
                    
                    st.success(f"T√¨m th·∫•y {len(sheets_to_process)} sheet h·ª£p l·ªá ƒë·ªÉ x·ª≠ l√Ω.")

            with st.spinner("ƒêang x·ª≠ l√Ω file Excel..."):
                final_df = process_student_excel(uploaded_excel_file, sheets_to_process)
            
            if final_df is not None:
                st.success("‚úÖ X·ª≠ l√Ω file Excel ho√†n t·∫•t!")
                st.write("Xem tr∆∞·ªõc 5 d√≤ng d·ªØ li·ªáu ƒë√£ t·ªïng h·ª£p:")
                st.dataframe(final_df.head())
                
                with st.spinner(f"ƒêang t·∫£i {len(final_df)} d√≤ng d·ªØ li·ªáu l√™n Google Sheets..."):
                    success = upload_to_gsheet(gsheet_client, SPREADSHEET_ID, WORKSHEET_NAME, final_df)
                
                if success:
                    st.balloons()
                    st.success(f"üéâ Chuy·ªÉn d·ªØ li·ªáu th√†nh c√¥ng! To√†n b·ªô {len(final_df)} h·ªçc sinh ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√†o Google Sheet.")
