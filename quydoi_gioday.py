import streamlit as st
import pandas as pd
import gspread
from gspread_dataframe import set_with_dataframe
import fun_quydoi as fq
import ast
import re
from itertools import zip_longest

# --- KI·ªÇM TRA ƒêI·ªÄU KI·ªÜN TI√äN QUY·∫æT (T·ª™ MAIN.PY) ---
if 'initialized' not in st.session_state or not st.session_state.initialized:
    st.error("Vui l√≤ng ƒëƒÉng nh·∫≠p v√† ƒë·∫£m b·∫£o th√¥ng tin c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng t·ª´ trang ch·ªß.")
    st.stop()

# --- S·ª≠a l·ªói: Ki·ªÉm tra d·ªØ li·ªáu n·ªÅn m·ªôt c√°ch an to√†n ---
# T√°ch bi·∫øn DataFrame v√† c√°c bi·∫øn kh√°c ƒë·ªÉ ki·ªÉm tra ri√™ng
required_dfs = [
    'df_lop', 'df_lopghep', 'df_loptach', 'df_lopsc',
    'df_mon', 'df_ngaytuan', 'df_nangnhoc', 'df_hesosiso'
]
required_others = ['spreadsheet', 'chuangv']

missing_data = []
# 1. Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa t·∫•t c·∫£ c√°c bi·∫øn c·∫ßn thi·∫øt
for key in required_dfs + required_others:
    if key not in st.session_state:
        missing_data.append(key)

# 2. N·∫øu bi·∫øn t·ªìn t·∫°i v√† l√† DataFrame, ki·ªÉm tra xem n√≥ c√≥ r·ªóng kh√¥ng
# Ch·ªâ th·ª±c hi·ªán n·∫øu kh√¥ng c√≥ l·ªói thi·∫øu bi·∫øn ·ªü b∆∞·ªõc 1
if not missing_data:
    for key in required_dfs:
        # ƒê·∫£m b·∫£o r·∫±ng key t·ªìn t·∫°i tr∆∞·ªõc khi ki·ªÉm tra .empty
        if key in st.session_state and st.session_state[key].empty:
            missing_data.append(f"{key} (d·ªØ li·ªáu r·ªóng)")

if missing_data:
    st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y ho·∫∑c d·ªØ li·ªáu n·ªÅn kh√¥ng h·ª£p l·ªá cho: {', '.join(missing_data)}. Vui l√≤ng ƒë·∫£m b·∫£o file main.py ƒë√£ t·∫£i ƒë·ªß v√† file 'DATA_KEGIO' c√≥ d·ªØ li·ªáu.")
    st.stop()


# --- CSS T√ôY CH·ªàNH GIAO DI·ªÜN ---
st.markdown("""
<style>
    /* Cho ph√©p c√°c √¥ trong b·∫£ng d·ªØ li·ªáu t·ª± ƒë·ªông xu·ªëng d√≤ng */
    .stDataFrame [data-testid="stTable"] div[data-testid="stVerticalBlock"] {
        white-space: normal;
        word-wrap: break-word;
    }
    /* Th√™m ƒë∆∞·ªùng vi·ªÅn v√† ki·ªÉu d√°ng cho c√°c √¥ s·ªë li·ªáu (metric) */
    [data-testid="stMetric"] {
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 10px;
        padding: 15px;
        background-color: #0a2941;
    }
    /* TƒÉng k√≠ch th∆∞·ªõc font ch·ªØ cho c√°c l·ª±a ch·ªçn trong selectbox */
    div[data-baseweb="select"] > div {
        font-size: 1.1em;
    }
</style>
""", unsafe_allow_html=True)


# --- C√ÅC H√ÄM X·ª¨ L√ù ---
def load_data_from_sheet(spreadsheet, sheet_name):
    """T·∫£i d·ªØ li·ªáu t·ª´ m·ªôt sheet c·ª• th·ªÉ v√† tr·∫£ v·ªÅ DataFrame."""
    try:
        worksheet = spreadsheet.worksheet(sheet_name)
        data = worksheet.get_all_records()
        df = pd.DataFrame(data)
        # ƒê·∫£m b·∫£o c√°c c·ªôt s·ªë h·ªçc l√† s·ªë, ƒëi·ªÅn NA b·∫±ng 0
        for col in ['S·ªë_ti·∫øt_d·∫°y', 'Sƒ©_s·ªë', 'LT', 'TH', 'H·ªá_s·ªë_ss', 'H·ªá_s·ªë_nn', 'H·ªá_s·ªë_l·ªõp', 'H·ªá_s·ªë_kh√°c', 'Gi·ªù_quy_ƒë·ªïi']:
            if col in df.columns:
                df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)
        return df
    except gspread.exceptions.WorksheetNotFound:
        st.warning(f"Kh√¥ng t√¨m th·∫•y sheet '{sheet_name}'. S·∫Ω t·∫°o m·ªõi khi c√≥ d·ªØ li·ªáu.")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ sheet '{sheet_name}': {e}")
        return pd.DataFrame()

def save_data_to_sheet(spreadsheet, sheet_name, df):
    """L∆∞u DataFrame v√†o m·ªôt sheet c·ª• th·ªÉ."""
    try:
        worksheet = spreadsheet.worksheet(sheet_name)
        worksheet.clear()
        set_with_dataframe(worksheet, df)
        return True
    except gspread.exceptions.WorksheetNotFound:
        try:
            worksheet = spreadsheet.add_worksheet(title=sheet_name, rows=100, cols=20)
            set_with_dataframe(worksheet, df)
            return True
        except Exception as e:
            st.error(f"Kh√¥ng th·ªÉ t·∫°o v√† l∆∞u v√†o sheet '{sheet_name}': {e}")
            return False
    except Exception as e:
        st.error(f"L·ªói khi l∆∞u d·ªØ li·ªáu v√†o sheet '{sheet_name}': {e}")
        return False

# --- KH·ªûI T·∫†O V√Ä T·∫¢I D·ªÆ LI·ªÜU ---
st.title("‚úçÔ∏è K√™ khai Gi·ªù d·∫°y")
st.markdown("Trang n√†y d√πng ƒë·ªÉ k√™ khai s·ªë ti·∫øt gi·∫£ng d·∫°y th·ª±c t·∫ø v√† t√≠nh to√°n gi·ªù quy ƒë·ªïi t∆∞∆°ng ·ª©ng.")

SHEET_NAME = "KEGIO_GIODAY"
if 'gioday_df' not in st.session_state or st.session_state.get('force_page_reload'):
    with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu gi·ªù d·∫°y..."):
        st.session_state.gioday_df = load_data_from_sheet(st.session_state.spreadsheet, SHEET_NAME)
        st.session_state['force_page_reload'] = False # Reset c·ªù

df = st.session_state.gioday_df

# --- GIAO DI·ªÜN NH·∫¨P LI·ªÜU ---
with st.expander("üìù TH√äM/C·∫¨P NH·∫¨T GI·ªú D·∫†Y", expanded=True):
    with st.form(key="gioday_form", clear_on_submit=True):
        st.subheader("Th√¥ng tin L·ªõp v√† M√¥n h·ªçc")

        # --- L·ª±a ch·ªçn ƒë·ªông ---
        col1, col2 = st.columns(2)
        with col1:
            # 1. Ch·ªçn Kh√≥a/H·ªá
            khoa_he_options = ["--Ch·ªçn--", "Kh√≥a...", "L·ªõp gh√©p", "L·ªõp t√°ch", "S∆° c·∫•p + VHPT"]
            selected_khoa_he = st.selectbox("Ch·ªçn Kh√≥a/H·ªá", options=khoa_he_options, key="sb_khoa_he")

        with col2:
            # 2. C·∫≠p nh·∫≠t c√°ch l·∫•y danh s√°ch L·ªõp h·ªçc
            class_options = ["--Ch·ªçn--"]
            lop_df_map = {
                "Kh√≥a...": st.session_state.df_lop,
                "L·ªõp gh√©p": st.session_state.df_lopghep,
                "L·ªõp t√°ch": st.session_state.df_loptach,
                "S∆° c·∫•p + VHPT": st.session_state.df_lopsc
            }
            selected_lop_df = None
            if selected_khoa_he != "--Ch·ªçn--":
                selected_lop_df = lop_df_map[selected_khoa_he]
                if 'L·ªõp' in selected_lop_df.columns:
                    # S·∫Øp x·∫øp danh s√°ch l·ªõp h·ªçc theo alphabet ƒë·ªÉ d·ªÖ t√¨m ki·∫øm
                    class_list = sorted(selected_lop_df['L·ªõp'].dropna().unique().tolist())
                    class_options.extend(class_list)
            
            selected_class = st.selectbox("Ch·ªçn L·ªõp h·ªçc", options=class_options, key="sb_lop")

        # 3. C·∫≠p nh·∫≠t c√°ch l·∫•y danh s√°ch M√¥n h·ªçc
        mon_hoc_options = ["--Ch·ªçn--"]
        ma_dsmon_value = None
        if selected_class != "--Ch·ªçn--" and selected_lop_df is not None and not selected_lop_df.empty:
            if 'M√£_DSMON' not in selected_lop_df.columns:
                st.error(f"L·ªói c·∫•u h√¨nh: C·ªôt 'M√£_DSMON' kh√¥ng t·ªìn t·∫°i trong d·ªØ li·ªáu cho '{selected_khoa_he}'. Vui l√≤ng ki·ªÉm tra file 'DATA_KEGIO'.")
                st.stop()
            
            class_row = selected_lop_df[selected_lop_df['L·ªõp'] == selected_class]
            if not class_row.empty:
                ma_dsmon_value = class_row.iloc[0]['M√£_DSMON']
                if pd.notna(ma_dsmon_value):
                    filtered_mon_df = st.session_state.df_mon[st.session_state.df_mon['M√£_ng√†nh'] == ma_dsmon_value]
                    if not filtered_mon_df.empty:
                        # S·∫Øp x·∫øp danh s√°ch m√¥n h·ªçc theo alphabet
                        mon_hoc_list = sorted(filtered_mon_df['M√¥n_h·ªçc'].dropna().unique().tolist())
                        mon_hoc_options.extend(mon_hoc_list)

        selected_mon_hoc = st.selectbox("Ch·ªçn M√¥n h·ªçc", options=mon_hoc_options, key="sb_mon_hoc")

        st.markdown("---")
        st.subheader("Th√¥ng tin chi ti·∫øt Gi·ªù d·∫°y")
        
        col3, col4, col5 = st.columns(3)
        with col3:
            so_tiet_day = st.number_input("S·ªë ti·∫øt d·∫°y th·ª±c t·∫ø", min_value=1, step=1)
            ngay_bat_dau = st.date_input("Ng√†y b·∫Øt ƒë·∫ßu")
        with col4:
            hs_lop = st.number_input("H·ªá s·ªë l·ªõp (gh√©p, t√°ch)", min_value=0.0, step=0.1, value=1.0)
            ngay_ket_thuc = st.date_input("Ng√†y k·∫øt th√∫c")
        with col5:
            hs_khac = st.number_input("H·ªá s·ªë kh√°c", min_value=0.0, step=0.1, value=1.0)
            ghi_chu = st.text_input("Ghi ch√∫")

        submitted = st.form_submit_button("L∆∞u th√¥ng tin")

        if submitted:
            if selected_class == "--Ch·ªçn--" or selected_mon_hoc == "--Ch·ªçn--":
                st.warning("Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß L·ªõp h·ªçc v√† M√¥n h·ªçc.")
            else:
                with st.spinner("ƒêang x·ª≠ l√Ω v√† t√≠nh to√°n..."):
                    # L·∫•y th√¥ng tin t·ª´ c√°c DataFrame n·ªÅn
                    mon_hoc_info = st.session_state.df_mon[st.session_state.df_mon['M√¥n_h·ªçc'] == selected_mon_hoc].iloc[0]
                    
                    # T√≠nh to√°n c√°c gi√° tr·ªã
                    tuan_bd, thang_bd, nam_bd = fq.get_week_month_year(ngay_bat_dau, st.session_state.df_ngaytuan)
                    tuan_kt, thang_kt, nam_kt = fq.get_week_month_year(ngay_ket_thuc, st.session_state.df_ngaytuan)
                    si_so = fq.get_siso_from_class(selected_class, thang_bd, selected_lop_df)
                    loai_hinh = f"{mon_hoc_info['LT']}LT+{mon_hoc_info['TH']}TH"
                    ma_mon = mon_hoc_info['M√£_m√¥n']
                    nang_nhoc_code = fq.get_nangnhoc_code(ma_dsmon_value, st.session_state.df_mon, st.session_state.df_nangnhoc)
                    
                    # T√≠nh h·ªá s·ªë
                    hs_ss = fq.get_heso_siso(si_so, mon_hoc_info['LT'] > 0, nang_nhoc_code, st.session_state.df_hesosiso)
                    hs_nn = fq.get_heso_nangnhoc(nang_nhoc_code)

                    # T√≠nh gi·ªù quy ƒë·ªïi
                    gio_qd = fq.calculate_gio_quy_doi(so_tiet_day, hs_ss, hs_nn, hs_lop, hs_khac)

                    new_row = {
                        "L·ªõp": selected_class, "M√¥n_h·ªçc": selected_mon_hoc, "M√£_m√¥n": ma_mon,
                        "S·ªë_ti·∫øt_d·∫°y": so_tiet_day, "Sƒ©_s·ªë": si_so, "Lo·∫°i_h√¨nh": loai_hinh,
                        "LT": mon_hoc_info['LT'], "TH": mon_hoc_info['TH'],
                        "Ng√†y_b·∫Øt_ƒë·∫ßu": ngay_bat_dau.strftime("%Y-%m-%d"), "Tu·∫ßn_b·∫Øt_ƒë·∫ßu": tuan_bd,
                        "Th√°ng_b·∫Øt_ƒë·∫ßu": thang_bd, "NƒÉm_b·∫Øt_ƒë·∫ßu": nam_bd,
                        "Ng√†y_k·∫øt_th√∫c": ngay_ket_thuc.strftime("%Y-%m-%d"), "Tu·∫ßn_k·∫øt_th√∫c": tuan_kt,
                        "Th√°ng_k·∫øt_th√∫c": thang_kt, "NƒÉm_k·∫øt_th√∫c": nam_kt,
                        "M√£_NN": nang_nhoc_code, "H·ªá_s·ªë_ss": hs_ss, "H·ªá_s·ªë_nn": hs_nn,
                        "H·ªá_s·ªë_l·ªõp": hs_lop, "H·ªá_s·ªë_kh√°c": hs_khac, "Gi·ªù_quy_ƒë·ªïi": gio_qd,
                        "Ghi_ch√∫": ghi_chu
                    }
                    
                    temp_df = pd.DataFrame([new_row])
                    st.session_state.gioday_df = pd.concat([st.session_state.gioday_df, temp_df], ignore_index=True)
                    
                    if save_data_to_sheet(st.session_state.spreadsheet, SHEET_NAME, st.session_state.gioday_df):
                        st.success("ƒê√£ l∆∞u th√¥ng tin gi·ªù d·∫°y th√†nh c√¥ng!")
                    else:
                        # N·∫øu l∆∞u th·∫•t b·∫°i, rollback l·∫°i df
                        st.session_state.gioday_df = st.session_state.gioday_df.iloc[:-1]


# --- HI·ªÇN TH·ªä D·ªÆ LI·ªÜU ƒê√É K√ä KHAI ---
st.header("B·∫£ng t·ªïng h·ª£p Gi·ªù d·∫°y ƒë√£ k√™ khai")

if df.empty:
    st.info("Ch∆∞a c√≥ d·ªØ li·ªáu gi·ªù d·∫°y n√†o ƒë∆∞·ª£c k√™ khai.")
else:
    # Logic t√≠nh to√°n gi·ªù chu·∫©n v√† hi·ªÉn th·ªã
    df_display = df.copy()
    df_display['H·ªçc_k·ª≥'] = df_display['Th√°ng_b·∫Øt_ƒë·∫ßu'].apply(lambda x: 1 if x in [8,9,10,11,12,1] else 2)
    
    # T√≠nh to√°n gi·ªù quy ƒë·ªïi th·ª´a/thi·∫øu
    df_display['giochuan_gv'] = st.session_state.giochuan
    df_display[['Ti·∫øt', 'Qƒê th·ª´a', 'Qƒê thi·∫øu']] = df_display.apply(
        lambda row: pd.Series(fq.tinh_gio_day_chi_tiet(
            row['LT'], row['TH'], row['S·ªë_ti·∫øt_d·∫°y'], st.session_state.chuangv
        )), axis=1
    )
    
    # Chia theo h·ªçc k·ª≥
    df_hk1 = df_display[df_display['H·ªçc_k·ª≥'] == 1]
    df_hk2 = df_display[df_display['H·ªçc_k·ª≥'] == 2]

    # C√°c c·ªôt c·∫ßn hi·ªÉn th·ªã
    final_columns_to_display = [
        "L·ªõp", "M√¥n_h·ªçc", "S·ªë_ti·∫øt_d·∫°y", "Sƒ©_s·ªë", "Lo·∫°i_h√¨nh", "Ng√†y_b·∫Øt_ƒë·∫ßu",
        "Ng√†y_k·∫øt_th√∫c", "H·ªá_s·ªë_ss", "H·ªá_s·ªë_nn", "H·ªá_s·ªë_l·ªõp", "H·ªá_s·ªë_kh√°c",
        "Gi·ªù_quy_ƒë·ªïi", "Ghi_ch√∫", "Ti·∫øt", "Qƒê th·ª´a", "Qƒê thi·∫øu"
    ]
    
    with st.container():
        st.subheader("H·ªçc k·ª≥ 1")
        if not df_hk1.empty:
            st.dataframe(df_hk1[final_columns_to_display])
        else:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu cho H·ªçc k·ª≥ 1.")

        st.subheader("H·ªçc k·ª≥ 2")
        if not df_hk2.empty:
            st.dataframe(df_hk2[final_columns_to_display])
        else:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu cho H·ªçc k·ª≥ 2.")
        
        st.markdown("---")
        
        # T√≠nh to√°n v√† hi·ªÉn th·ªã t·ªïng h·ª£p cu·ªëi c√πng
        def display_totals(title, df_hk):
            if df_hk.empty:
                total_tiet_day, total_qd_thua, total_qd_thieu = 0, 0, 0
            else:
                total_tiet_day = df_hk['Ti·∫øt'].sum()
                total_qd_thua = df_hk['Qƒê th·ª´a'].sum()
                total_qd_thieu = df_hk['Qƒê thi·∫øu'].sum()
                
            st.subheader(title)
            col1, col2, col3 = st.columns(3)
            col1.metric("T·ªïng Ti·∫øt d·∫°y", f"{total_tiet_day:,.0f}")
            col2.metric("T·ªïng Quy ƒë·ªïi (khi d∆∞ gi·ªù)", f"{total_qd_thua:,.1f}")
            col3.metric("T·ªïng quy ƒë·ªïi (khi thi·∫øu gi·ªù)", f"{total_qd_thieu:,.1f}")
            return total_tiet_day, total_qd_thua, total_qd_thieu

        tiet_hk1, qd_thua_hk1, qd_thieu_hk1 = display_totals("T·ªïng h·ª£p H·ªçc k·ª≥ 1", df_hk1)
        tiet_hk2, qd_thua_hk2, qd_thieu_hk2 = display_totals("T·ªïng h·ª£p H·ªçc k·ª≥ 2", df_hk2)
        
        st.markdown("---")
        
        # T·ªïng h·ª£p c·∫£ nƒÉm
        st.subheader("T·ªïng h·ª£p C·∫£ nƒÉm")
        total_tiet_cn = tiet_hk1 + tiet_hk2
        total_qd_thua_cn = qd_thua_hk1 + qd_thua_hk2
        total_qd_thieu_cn = qd_thieu_hk1 + qd_thieu_hk2
        
        col_cn1, col_cn2, col_cn3 = st.columns(3)
        col_cn1.metric("T·ªïng Ti·∫øt d·∫°y C·∫£ nƒÉm", f"{total_tiet_cn:,.0f}")
        col_cn2.metric("T·ªïng Quy ƒë·ªïi (d∆∞) C·∫£ nƒÉm", f"{total_qd_thua_cn:,.1f}")
        col_cn3.metric("T·ªïng Quy ƒë·ªïi (thi·∫øu) C·∫£ nƒÉm", f"{total_qd_thieu_cn:,.1f}")

