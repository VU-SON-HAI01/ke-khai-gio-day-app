import streamlit as st
import pandas as pd
import openpyxl
from openpyxl.utils import get_column_letter
from openpyxl.styles import Border, Side
import io
import re

# --- C√ÅC H√ÄM H·ªñ TR·ª¢ ---

def find_student_data_in_sheet(worksheet):
    """
    T√¨m v√† tr√≠ch xu·∫•t d·ªØ li·ªáu h·ªçc sinh t·ª´ m·ªôt sheet c√≥ c·∫•u tr√∫c kh√¥ng c·ªë ƒë·ªãnh.
    - T·ª± ƒë·ªông t√¨m d√≤ng header d·ª±a v√†o 'H·ªç v√† t√™n'.
    - Chu·∫©n h√≥a v√† gh√©p 2 c·ªôt h·ªç v√† t√™n.
    - Chu·∫©n h√≥a v√† ƒë·ªãnh d·∫°ng c·ªôt ng√†y sinh.
    - D·ª´ng l·∫°i khi c·ªôt 'H·ªç v√† t√™n' tr·ªëng ho·∫∑c ch·ª©a s·ªë.
    - Tr·∫£ v·ªÅ m·ªôt DataFrame.
    """
    header_row_index = -1
    name_col_index = -1
    dob_col_index = -1

    # 1. T√¨m d√≤ng header v√† c√°c c·ªôt c·∫ßn thi·∫øt
    for i, row in enumerate(worksheet.iter_rows(min_row=1, max_row=10, values_only=True), 1):
        row_str = [str(cell).lower() if cell is not None else '' for cell in row]
        try:
            name_col_index = row_str.index('h·ªç v√† t√™n') + 1
            last_name_col_index = name_col_index + 1
            dob_col_index = row_str.index('nƒÉm sinh') + 1
            header_row_index = i
            break
        except ValueError:
            continue

    if header_row_index == -1:
        return None # Kh√¥ng t√¨m th·∫•y header

    # 2. Tr√≠ch xu·∫•t d·ªØ li·ªáu v·ªõi logic d·ª´ng v√† chu·∫©n h√≥a m·ªõi
    student_data = []
    # B·∫Øt ƒë·∫ßu ƒë·ªçc t·ª´ d√≤ng ngay sau header
    for row in worksheet.iter_rows(min_row=header_row_index + 1, values_only=True):
        first_name_cell = row[name_col_index - 1]
        last_name_cell = row[last_name_col_index - 1]
        dob_cell = row[dob_col_index - 1]

        # --- LOGIC D·ª™NG M·ªöI ---
        if (first_name_cell is None or str(first_name_cell).strip() == '' or 
            isinstance(first_name_cell, (int, float))):
            break
            
        # --- CHU·∫®N H√ìA D·ªÆ LI·ªÜU ---
        # 1. Chu·∫©n h√≥a t√™n: X√≥a kho·∫£ng tr·∫Øng th·ª´a
        first_name_str = re.sub(r'\s+', ' ', str(first_name_cell or '')).strip()
        last_name_str = re.sub(r'\s+', ' ', str(last_name_cell or '')).strip()
        full_name = f"{first_name_str} {last_name_str}".strip()

        # 2. Chu·∫©n h√≥a ng√†y sinh: Chuy·ªÉn ƒë·ªïi sang ƒë·ªãnh d·∫°ng dd/mm/yyyy
        formatted_dob = ''
        if dob_cell is not None:
            try:
                # pd.to_datetime r·∫•t linh ho·∫°t trong vi·ªác ƒë·ªçc c√°c ƒë·ªãnh d·∫°ng kh√°c nhau
                dt_object = pd.to_datetime(dob_cell, errors='coerce')
                if pd.notna(dt_object):
                    # N·∫øu chuy·ªÉn ƒë·ªïi th√†nh c√¥ng, ƒë·ªãnh d·∫°ng l·∫°i
                    formatted_dob = dt_object.strftime('%d/%m/%Y')
                else:
                    # N·∫øu kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi, gi·ªØ l·∫°i gi√° tr·ªã g·ªëc d∆∞·ªõi d·∫°ng text
                    formatted_dob = str(dob_cell).strip()
            except Exception:
                # X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p l·ªói kh√°c
                formatted_dob = str(dob_cell).strip()
        
        student_data.append({
            "H·ªå V√Ä T√äN": full_name,
            "NG√ÄY SINH": formatted_dob
        })

    return pd.DataFrame(student_data)


def process_excel_files(template_file, data_file):
    """
    H√†m ch√≠nh ƒë·ªÉ x·ª≠ l√Ω, ch√®n d·ªØ li·ªáu t·ª´ file data v√†o file template.
    """
    generated_files = {}
    
    # ƒê·ªçc to√†n b·ªô file d·ªØ li·ªáu b·∫±ng openpyxl ƒë·ªÉ x·ª≠ l√Ω linh ho·∫°t
    data_workbook = openpyxl.load_workbook(data_file, data_only=True)
    
    for sheet_name in data_workbook.sheetnames:
        worksheet = data_workbook[sheet_name]

        # --- TR√çCH XU·∫§T D·ªÆ LI·ªÜU ƒê·ªòNG ---
        df_sheet_data = find_student_data_in_sheet(worksheet)
        
        if df_sheet_data is None or df_sheet_data.empty:
            st.warning(f"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu h·ªçc sinh h·ª£p l·ªá trong sheet '{sheet_name}'. B·ªè qua sheet n√†y.")
            continue

        # T·∫£i b·∫£n sao c·ªßa file m·∫´u v√†o b·ªô nh·ªõ cho m·ªói l·∫ßn l·∫∑p
        template_file.seek(0)
        output_workbook = openpyxl.load_workbook(template_file)
        
        try:
            output_sheet = output_workbook["Bang diem qua trinh"]
        except KeyError:
            st.error("L·ªói: File m·∫´u kh√¥ng ch·ª©a sheet c√≥ t√™n 'Bang diem qua trinh'.")
            return {}

        # --- C√ÅC THAM S·ªê C·∫§U H√åNH ---
        START_ROW = 7
        TEMPLATE_STUDENT_ROWS = 5
        INSERT_BEFORE_ROW = 12
        STT_COL = 1
        NAME_COL = 3
        DOB_COL = 5
        FORMULA_START_COL = 16
        STYLE_TEMPLATE_ROW_INDEX = 9
        EXTRA_BLANK_ROWS = 2 
        BORDER_END_COL = 30

        # --- X·ª¨ L√ù CH√àN D√íNG V√Ä SAO CH√âP FORMAT ---
        num_students = len(df_sheet_data)
        total_rows_needed = num_students + EXTRA_BLANK_ROWS
        rows_to_insert = total_rows_needed - TEMPLATE_STUDENT_ROWS
        
        if rows_to_insert > 0:
            output_sheet.insert_rows(INSERT_BEFORE_ROW, amount=rows_to_insert)
            
            for row_idx in range(INSERT_BEFORE_ROW, INSERT_BEFORE_ROW + rows_to_insert):
                for col_idx in range(1, output_sheet.max_column + 1):
                    source_cell = output_sheet.cell(row=STYLE_TEMPLATE_ROW_INDEX, column=col_idx)
                    new_cell = output_sheet.cell(row=row_idx, column=col_idx)
                    
                    if source_cell.has_style:
                        new_cell.font = source_cell.font.copy()
                        new_cell.border = source_cell.border.copy()
                        new_cell.fill = source_cell.fill.copy()
                        new_cell.number_format = source_cell.number_format
                        new_cell.protection = source_cell.protection.copy()
                        new_cell.alignment = source_cell.alignment.copy()

        # --- SAO CH√âP V√Ä √ÅP D·ª§NG C√îNG TH·ª®C ---
        formulas = {}
        max_col = output_sheet.max_column
        for col in range(FORMULA_START_COL, max_col + 1):
            cell = output_sheet.cell(row=START_ROW, column=col)
            if cell.value and str(cell.value).startswith('='):
                formulas[col] = cell.value

        # √Åp d·ª•ng c√¥ng th·ª©c cho c·∫£ c√°c d√≤ng d·ªØ li·ªáu v√† d√≤ng tr·ªëng
        for row_num in range(START_ROW, START_ROW + total_rows_needed):
            for col_num, formula_str in formulas.items():
                new_formula = formula_str.replace(str(START_ROW), str(row_num))
                output_sheet.cell(row=row_num, column=col_num).value = new_formula

        # --- ƒêI·ªÄN D·ªÆ LI·ªÜU H·ªåC SINH ---
        for i, student_row in df_sheet_data.iterrows():
            current_row_index = START_ROW + i
            output_sheet.cell(row=current_row_index, column=STT_COL).value = i + 1
            output_sheet.cell(row=current_row_index, column=NAME_COL).value = student_row["H·ªå V√Ä T√äN"]
            output_sheet.cell(row=current_row_index, column=DOB_COL).value = student_row["NG√ÄY SINH"]

        # --- TH√äM BORDER DOUBLE LINE ---
        last_data_row = START_ROW + total_rows_needed - 1
        double_line_side = Side(style='double')
        
        for col_idx in range(1, BORDER_END_COL + 1):
            cell_to_border = output_sheet.cell(row=last_data_row, column=col_idx)
            existing_border = cell_to_border.border
            cell_to_border.border = Border(
                left=existing_border.left,
                right=existing_border.right,
                top=existing_border.top,
                bottom=double_line_side
            )

        # L∆∞u workbook ƒë√£ x·ª≠ l√Ω v√†o buffer b·ªô nh·ªõ
        output_buffer = io.BytesIO()
        output_workbook.save(output_buffer)
        generated_files[sheet_name] = output_buffer.getvalue()
        
    return generated_files

# --- GIAO DI·ªÜN ·ª®NG D·ª§NG STREAMLIT ---

st.title("‚öôÔ∏è C√¥ng c·ª• C·∫≠p nh·∫≠t B·∫£ng ƒëi·ªÉm HSSV")
st.markdown("---")

if 'generated_files' not in st.session_state:
    st.session_state.generated_files = {}

left_column, right_column = st.columns((1, 1), gap="large")

with left_column:
    st.header("B∆∞·ªõc 1: T·∫£i l√™n c√°c file c·∫ßn thi·∫øt")
    st.markdown("""
    1.  **T·∫£i File M·∫´u B·∫£ng ƒêi·ªÉm**: T·∫£i l√™n file `Bang diem (Mau).xlsx` c·ªßa b·∫°n.
    2.  **T·∫£i D·ªØ Li·ªáu HSSV**: T·∫£i l√™n file Excel ch·ª©a danh s√°ch h·ªçc sinh.
    """)

    uploaded_template_file = st.file_uploader(
        "üìÇ T·∫£i l√™n File M·∫´u B·∫£ng ƒêi·ªÉm (.xlsx)",
        type=['xlsx'],
        key="template_uploader"
    )

    uploaded_data_file = st.file_uploader(
        "üìÇ T·∫£i l√™n File D·ªØ Li·ªáu HSSV (.xlsx)",
        type=['xlsx'],
        key="data_uploader"
    )
    
    st.markdown("---")
    
    if uploaded_template_file and uploaded_data_file:
        st.header("B∆∞·ªõc 2: B·∫Øt ƒë·∫ßu x·ª≠ l√Ω")
        st.markdown("Nh·∫•n n√∫t b√™n d∆∞·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu qu√° tr√¨nh x·ª≠ l√Ω.")
        
        if st.button("üöÄ X·ª≠ l√Ω v√† T·∫°o Files", type="primary", use_container_width=True):
            try:
                with st.spinner("ƒêang x·ª≠ l√Ω... Vui l√≤ng ch·ªù trong gi√¢y l√°t."):
                    st.session_state.generated_files = process_excel_files(
                        uploaded_template_file, 
                        uploaded_data_file
                    )
                
                if st.session_state.generated_files:
                    st.success(f"‚úÖ Ho√†n th√†nh! ƒê√£ x·ª≠ l√Ω v√† t·∫°o ra {len(st.session_state.generated_files)} file.")
                else:
                    st.warning("Qu√° tr√¨nh x·ª≠ l√Ω ho√†n t·∫•t nh∆∞ng kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c t·∫°o. Vui l√≤ng ki·ªÉm tra l·∫°i c√°c file ƒë·∫ßu v√†o.")

            except Exception as e:
                st.error(f"ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω: {e}")

with right_column:
    st.header("B∆∞·ªõc 3: T·∫£i xu·ªëng k·∫øt qu·∫£")
    
    if not st.session_state.generated_files:
        st.info("Ch∆∞a c√≥ file n√†o ƒë∆∞·ª£c t·∫°o. Vui l√≤ng t·∫£i l√™n c·∫£ 2 file v√† nh·∫•n n√∫t 'X·ª≠ l√Ω'.")
    else:
        st.markdown(f"ƒê√£ t·∫°o th√†nh c√¥ng **{len(st.session_state.generated_files)}** file. Nh·∫•n v√†o c√°c n√∫t b√™n d∆∞·ªõi ƒë·ªÉ t·∫£i v·ªÅ:")
        
        for file_name_prefix, file_data in st.session_state.generated_files.items():
            final_file_name = f"{file_name_prefix}_BangDiem.xlsx"
            st.download_button(
                label=f"üìÑ T·∫£i xu·ªëng {final_file_name}",
                data=file_data,
                file_name=final_file_name,
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                key=f"download_{file_name_prefix}"
            )
        
        st.warning("L∆∞u √Ω: C√°c file n√†y s·∫Ω b·ªã x√≥a n·∫øu b·∫°n t·∫£i l√™n file m·ªõi v√† x·ª≠ l√Ω l·∫°i.")
