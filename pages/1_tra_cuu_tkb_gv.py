# pages/1_tra_cuu_tkb_gv.py
import streamlit as st
import pandas as pd
import re
import gspread
from google.oauth2.service_account import Credentials

# ==============================================================================
# == C√ÅC H√ÄM H·ªñ TR·ª¢ (ƒê√É G·ªòP V√ÄO ƒê√ÇY) ==
# ==============================================================================

@st.cache_resource
def connect_to_gsheet():
    """K·∫øt n·ªëi t·ªõi Google Sheets s·ª≠ d·ª•ng Service Account credentials t·ª´ st.secrets."""
    try:
        creds_dict = st.secrets["gcp_service_account"]
        creds = Credentials.from_service_account_info(
            creds_dict,
            scopes=["https://www.googleapis.com/auth/spreadsheets"],
        )
        client = gspread.authorize(creds)
        return client
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi Google Sheets: {e}")
        return None

@st.cache_data(ttl=60)
def load_all_data_and_get_dates(_client, spreadsheet_id):
    """T·∫£i d·ªØ li·ªáu t·ª´ t·∫•t c·∫£ c√°c sheet "DATA_*", h·ª£p nh·∫•t ch√∫ng."""
    if not _client:
        return pd.DataFrame(), []
    try:
        spreadsheet = _client.open_by_key(spreadsheet_id)
        sheet_list = [s.title for s in spreadsheet.worksheets() if s.title.startswith("DATA_")]
        if not sheet_list:
            return pd.DataFrame(), []
        all_dfs = []
        for sheet_name in sheet_list:
            worksheet = spreadsheet.worksheet(sheet_name)
            df = pd.DataFrame(worksheet.get_all_records())
            if not df.empty:
                all_dfs.append(df)
        if not all_dfs:
            return pd.DataFrame(), []
        combined_df = pd.concat(all_dfs, ignore_index=True)
        if 'Ng√†y √°p d·ª•ng' in combined_df.columns:
            valid_dates_series = pd.to_datetime(combined_df['Ng√†y √°p d·ª•ng'], dayfirst=True, errors='coerce')
            date_list = sorted(valid_dates_series.dropna().dt.strftime('%d/%m/%Y').unique())
            combined_df['Ng√†y √°p d·ª•ng'] = valid_dates_series.dt.strftime('%d/%m/%Y')
        else:
            date_list = []
        for col in ['Th·ª©', 'Ti·∫øt']:
            if col in combined_df.columns:
                combined_df[col] = pd.to_numeric(combined_df[col], errors='coerce')
        return combined_df, date_list
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i v√† h·ª£p nh·∫•t d·ªØ li·ªáu: {e}")
        return pd.DataFrame(), []

def inject_custom_css():
    """Ch√®n CSS ƒë·ªÉ t√πy ch·ªânh giao di·ªán cho c√°c link ƒë∆∞·ª£c t·∫°o b·ªüi st.page_link."""
    green_color = "#00FF00"
    st.markdown(f"""
        <style>
            a[data-testid="stPageLink-NavLink"][href*="2_thongtin_monhoc"],
            a[data-testid="stPageLink-NavLink"][href*="2_sodo_phonghoc"] {{
                color: {green_color} !important; text-decoration: none !important; font-weight: normal !important;
                display: inline !important; padding: 0 !important;
            }}
            a[data-testid="stPageLink-NavLink"][href*="2_thongtin_monhoc"]:hover,
            a[data-testid="stPageLink-NavLink"][href*="2_sodo_phonghoc"]:hover {{
                text-decoration: underline !important; color: {green_color} !important;
            }}
        </style>
    """, unsafe_allow_html=True)

def display_schedule_item(label, value, link_page=None, query_params=None, color="#00FF00"):
    """H√†m ti·ªán √≠ch ƒë·ªÉ hi·ªÉn th·ªã m·ªôt d√≤ng th√¥ng tin, ƒë√£ s·ª≠a l·ªói TypeError."""
    col1, col2 = st.columns([1, 5])
    with col1:
        st.markdown(f"<b>{label}</b>", unsafe_allow_html=True)
    with col2:
        # Ch·ªâ t·∫°o link n·∫øu 'value' h·ª£p l·ªá (kh√¥ng r·ªóng, kh√¥ng ph·∫£i NaN)
        if link_page and pd.notna(value) and str(value).strip():
            # *** PH·∫¶N S·ª¨A L·ªñI: ƒê·∫£m b·∫£o t·∫•t c·∫£ gi√° tr·ªã trong query_params l√† chu·ªói ***
            safe_query_params = {k: str(v) for k, v in query_params.items() if pd.notna(v)}
            st.page_link(link_page, label=str(value), query_params=safe_query_params)
        elif pd.notna(value) and str(value).strip():
            st.markdown(f"<span style='color:{color};'>{value}</span>", unsafe_allow_html=True)

def render_schedule_details(schedule_df, mode='class'):
    """H√†m hi·ªÉn th·ªã chi ti·∫øt l·ªãch h·ªçc, s·ª≠ d·ª•ng st.page_link."""
    inject_custom_css()
    number_to_day_map = {
        2: '2Ô∏è‚É£ TH·ª® HAI', 3: '3Ô∏è‚É£ TH·ª® BA', 4: '4Ô∏è‚É£ TH·ª® T∆Ø',
        5: '5Ô∏è‚É£ TH·ª® NƒÇM', 6: '6Ô∏è‚É£ TH·ª® S√ÅU', 7: '7Ô∏è‚É£ TH·ª® B·∫¢Y'
    }
    if 'Th·ª©' not in schedule_df.columns:
        st.warning("D·ªØ li·ªáu TKB thi·∫øu c·ªôt 'Th·ª©'.")
        return
    schedule_df['Th·ª© ƒê·∫ßy ƒê·ªß'] = schedule_df['Th·ª©'].map(number_to_day_map)
    day_order = list(number_to_day_map.values())
    session_order = ['S√°ng', 'Chi·ªÅu']
    schedule_df['Th·ª© ƒê·∫ßy ƒê·ªß'] = pd.Categorical(schedule_df['Th·ª© ƒê·∫ßy ƒê·ªß'], categories=day_order, ordered=True)
    if 'Bu·ªïi' in schedule_df.columns:
        schedule_df['Bu·ªïi'] = pd.Categorical(schedule_df['Bu·ªïi'], categories=session_order, ordered=True)
        schedule_sorted = schedule_df.sort_values(by=['Th·ª© ƒê·∫ßy ƒê·ªß', 'Bu·ªïi', 'Ti·∫øt'])
    else:
        schedule_sorted = schedule_df.sort_values(by=['Th·ª© ƒê·∫ßy ƒê·ªß', 'Ti·∫øt'])

    for day, day_group in schedule_sorted.groupby('Th·ª© ƒê·∫ßy ƒê·ªß', observed=False):
        if day_group.get('M√¥n h·ªçc', pd.Series()).dropna().empty:
            continue
        st.markdown(f"##### <b>{day}</b> <span style='color:white; font-weight: normal; margin-left: 10px;'>--------------------</span>", unsafe_allow_html=True)
        for session, session_group in day_group.groupby('Bu·ªïi', observed=False):
            if session_group.get('M√¥n h·ªçc', pd.Series()).dropna().empty: continue
            color = "#28a745" if session == "S√°ng" else "#dc3545"
            st.markdown(f'<p style="color:{color}; font-weight:bold;">{session.upper()}</p>', unsafe_allow_html=True)
            subjects_in_session = {}
            for _, row in session_group.iterrows():
                if pd.notna(row.get('M√¥n h·ªçc')) and str(row.get('M√¥n h·ªçc')).strip():
                    key = (row.get('M√¥n h·ªçc'), row.get('Gi√°o vi√™n BM'), row.get('Ph√≤ng h·ªçc'), row.get('Ghi ch√∫'), row.get('Ng√†y √°p d·ª•ng', ''), row.get('L·ªõp', ''))
                    if key not in subjects_in_session: subjects_in_session[key] = []
                    subjects_in_session[key].append(str(row['Ti·∫øt']))
            if not subjects_in_session:
                st.markdown("&nbsp;&nbsp;‚ú®Ngh·ªâ")
            else:
                for (subject, gv, phong, ghi_chu, ngay_ap_dung, lop), tiet_list in subjects_in_session.items():
                    with st.container():
                        tiet_str = ", ".join(sorted(tiet_list, key=int))
                        display_schedule_item("üìñ M√¥n:", subject, link_page="pages/2_thongtin_monhoc.py", query_params={"monhoc": subject})
                        display_schedule_item("‚è∞ Ti·∫øt:", tiet_str)
                        if mode == 'class' and gv:
                            display_schedule_item("üßë‚Äçüíº GV:", gv)
                        elif mode == 'teacher' and lop:
                            display_schedule_item("üìù L·ªõp:", lop)
                        if phong:
                            display_schedule_item("üè§ Ph√≤ng:", phong, link_page="pages/2_sodo_phonghoc.py", query_params={"phong": phong})
                        ghi_chu_part = ""
                        if ghi_chu and "h·ªçc t·ª´" in str(ghi_chu).lower():
                            date_match = re.search(r'(\d+/\d+)', str(ghi_chu))
                            if date_match: ghi_chu_part = f"\"{date_match.group(1)}\""
                        elif ngay_ap_dung and str(ngay_ap_dung).strip():
                            ghi_chu_part = f"\"{ngay_ap_dung}\""
                        if ghi_chu_part:
                            display_schedule_item("üîú B·∫Øt ƒë·∫ßu h·ªçc t·ª´:", ghi_chu_part)
                        st.markdown("<br>", unsafe_allow_html=True)

# ==============================================================================
# == GIAO DI·ªÜN CH√çNH C·ª¶A TRANG TRA C·ª®U THEO GI√ÅO VI√äN ==
# ==============================================================================

def display_teacher_schedule(df_data):
    """H√†m hi·ªÉn th·ªã giao di·ªán tra c·ª©u theo Gi√°o vi√™n."""
    teacher_list = sorted(df_data[df_data['Gi√°o vi√™n BM'].ne('')]['Gi√°o vi√™n BM'].dropna().unique())
    if not teacher_list:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu gi√°o vi√™n cho ng√†y √°p d·ª•ng ƒë√£ ch·ªçn.")
        return
    selected_teacher = st.selectbox("Ch·ªçn gi√°o vi√™n ƒë·ªÉ xem chi ti·∫øt:", options=teacher_list, key="select_teacher")
    if selected_teacher:
        teacher_schedule = df_data[df_data['Gi√°o vi√™n BM'] == selected_teacher].copy()
        st.markdown(f"--- \n ##### üóìÔ∏è L·ªãch d·∫°y chi ti·∫øt c·ªßa gi√°o vi√™n **{selected_teacher}**")
        render_schedule_details(teacher_schedule, mode='teacher')

st.set_page_config(page_title="TKB theo Gi√°o vi√™n", layout="wide")
st.markdown("### üóìÔ∏è Tra c·ª©u Th·ªùi Kh√≥a Bi·ªÉu theo Gi√°o vi√™n")

TEACHER_INFO_SHEET_ID = st.secrets.get("google_sheet", {}).get("teacher_info_sheet_id", "1TJfaywQM1VNGjDbWyC3osTLLOvlgzP0-bQjz8J-_BoI")
gsheet_client = connect_to_gsheet()

if gsheet_client:
    with st.spinner("ƒêang t·∫£i v√† t·ªïng h·ª£p d·ªØ li·ªáu TKB..."):
        df_all_data, date_list = load_all_data_and_get_dates(gsheet_client, TEACHER_INFO_SHEET_ID)
    if not date_list:
        st.warning("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu 'Ng√†y √°p d·ª•ng' trong c√°c sheet DATA_*.")
    else:
        selected_date = st.selectbox("Ch·ªçn ng√†y √°p d·ª•ng TKB ƒë·ªÉ tra c·ª©u:", options=date_list)
        if selected_date:
            df_filtered_by_date = df_all_data[df_all_data['Ng√†y √°p d·ª•ng'].astype(str) == str(selected_date)].copy()
            if not df_filtered_by_date.empty:
                display_teacher_schedule(df_filtered_by_date)
            else:
                st.info(f"Kh√¥ng c√≥ l·ªãch d·∫°y n√†o ƒë∆∞·ª£c ghi nh·∫≠n cho ng√†y {selected_date}.")
else:
    st.error("L·ªói: Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh Google Sheets trong `st.secrets`. Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu.")
