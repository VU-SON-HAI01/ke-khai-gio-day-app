# pages/3_Tra_cuu_HSSV.py
import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials

# --- C√ÅC H√ÄM K·∫æT N·ªêI V√Ä ƒê·ªåC GOOGLE SHEETS ---

@st.cache_resource
def connect_to_gsheet():
    """
    K·∫øt n·ªëi t·ªõi Google Sheets s·ª≠ d·ª•ng Service Account credentials t·ª´ st.secrets.
    """
    try:
        creds_dict = st.secrets["gcp_service_account"]
        creds = Credentials.from_service_account_info(
            creds_dict,
            scopes=["https://www.googleapis.com/auth/spreadsheets"],
        )
        client = gspread.authorize(creds)
        return client
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi Google Sheets: {e}")
        return None

@st.cache_data(ttl=300) # Cache d·ªØ li·ªáu trong 5 ph√∫t
def load_student_data(_client, spreadsheet_id):
    """
    T·∫£i d·ªØ li·ªáu t·ª´ sheet DANHSACH_HSSV v√† chu·∫©n h√≥a.
    """
    try:
        spreadsheet = _client.open_by_key(spreadsheet_id)
        worksheet = spreadsheet.worksheet("DANHSACH_HSSV")
        df = pd.DataFrame(worksheet.get_all_records())

        # T·∫°o c·ªôt 'H·ªç v√† t√™n' ƒë·∫ßy ƒë·ªß ƒë·ªÉ t√¨m ki·∫øm
        df['H·ªç ƒë·ªám'] = df['H·ªç ƒë·ªám'].astype(str)
        df['T√™n'] = df['T√™n'].astype(str)
        df['H·ªç v√† t√™n'] = df['H·ªç ƒë·ªám'] + ' ' + df['T√™n']
        
        # Chu·∫©n h√≥a ki·ªÉu d·ªØ li·ªáu cho c√°c c·ªôt s·∫Ω ƒë∆∞·ª£c l·ªçc
        if 'L·ªõp' in df.columns:
            df['L·ªõp'] = df['L·ªõp'].astype(str)
        if 'NƒÉm sinh' in df.columns:
            df['NƒÉm sinh'] = df['NƒÉm sinh'].astype(str)

        return df
    except gspread.exceptions.WorksheetNotFound:
        st.error("Kh√¥ng t√¨m th·∫•y sheet 'DANHSACH_HSSV'. Vui l√≤ng ki·ªÉm tra l·∫°i Google Sheet.")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu h·ªçc sinh: {e}")
        return pd.DataFrame()

# C·∫¨P NH·∫¨T: H√†m m·ªõi ƒë·ªÉ t·∫£i danh s√°ch l·ªõp t·ª´ sheet DANH_MUC
@st.cache_data(ttl=300) # Cache d·ªØ li·ªáu trong 5 ph√∫t
def load_class_list(_client, spreadsheet_id):
    """
    T·∫£i danh s√°ch c√°c l·ªõp h·ªçc t·ª´ sheet DANH_MUC, c·ªôt 'L·ªõp h·ªçc'.
    """
    try:
        spreadsheet = _client.open_by_key(spreadsheet_id)
        worksheet = spreadsheet.worksheet("DANH_MUC")
        df_classes = pd.DataFrame(worksheet.get_all_records())
        
        if 'L·ªõp h·ªçc' in df_classes.columns:
            # L·∫•y danh s√°ch l·ªõp, lo·∫°i b·ªè gi√° tr·ªã r·ªóng v√† tr√πng l·∫∑p, sau ƒë√≥ s·∫Øp x·∫øp
            class_list = sorted(df_classes['L·ªõp h·ªçc'].dropna().unique().tolist())
            return class_list
        else:
            st.error("Kh√¥ng t√¨m th·∫•y c·ªôt 'L·ªõp h·ªçc' trong sheet 'DANH_MUC'.")
            return []
    except gspread.exceptions.WorksheetNotFound:
        st.error("Kh√¥ng t√¨m th·∫•y sheet 'DANH_MUC'. Vui l√≤ng ki·ªÉm tra l·∫°i Google Sheet.")
        return []
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i danh s√°ch l·ªõp: {e}")
        return []

# --- GIAO DI·ªÜN ·ª®NG D·ª§NG STREAMLIT ---

st.set_page_config(page_title="Tra c·ª©u HSSV", layout="wide")
st.title("üîç Tra c·ª©u th√¥ng tin H·ªçc sinh - Sinh vi√™n")
st.markdown("---")

# --- C·∫§U H√åNH ---
SPREADSHEET_ID = "1TJfaywQM1VNGjDbWyC3osTLLOvlgzP0-bQjz8J-_BoI" 

# --- K·∫æT N·ªêI V√Ä T·∫¢I D·ªÆ LI·ªÜU ---
gsheet_client = connect_to_gsheet()
if gsheet_client:
    df_students = load_student_data(gsheet_client, SPREADSHEET_ID)
    # C·∫¨P NH·∫¨T: T·∫£i danh s√°ch l·ªõp ƒë·ªÉ ƒë∆∞a v√†o selectbox
    class_list = load_class_list(gsheet_client, SPREADSHEET_ID)

    if not df_students.empty:
        # --- GIAO DI·ªÜN T√åM KI·∫æM ---
        col1, col2, col3 = st.columns(3)
        with col1:
            name_input = st.text_input("Nh·∫≠p H·ªç v√† t√™n c·∫ßn t√¨m:")
        with col2:
            dob_input = st.text_input("Nh·∫≠p NƒÉm sinh (dd/mm/yyyy):")
        with col3:
            # C·∫¨P NH·∫¨T: Thay th·∫ø text_input b·∫±ng selectbox
            # Th√™m t√πy ch·ªçn "T·∫•t c·∫£" ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ b·ªè qua b·ªô l·ªçc l·ªõp
            options_for_selectbox = ["T·∫•t c·∫£"] + class_list
            class_selection = st.selectbox("Ch·ªçn L·ªõp:", options=options_for_selectbox)

        if st.button("üîé T√¨m ki·∫øm", type="primary", use_container_width=True):
            name_query = name_input.strip().lower()
            dob_query = dob_input.strip()

            # C·∫¨P NH·∫¨T: ƒêi·ªÅu ki·ªán ki·ªÉm tra ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi cho selectbox
            if not name_query and not dob_query and class_selection == "T·∫•t c·∫£":
                st.warning("Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt th√¥ng tin ho·∫∑c ch·ªçn m·ªôt l·ªõp c·ª• th·ªÉ ƒë·ªÉ t√¨m ki·∫øm.")
            else:
                results_df = df_students.copy()
                
                # L·ªçc theo t√™n n·∫øu c√≥ nh·∫≠p
                if name_query:
                    results_df = results_df[results_df['H·ªç v√† t√™n'].str.lower().str.contains(name_query, na=False)]

                # L·ªçc theo nƒÉm sinh n·∫øu c√≥ nh·∫≠p
                if dob_query:
                    results_df = results_df[results_df['NƒÉm sinh'] == dob_query]

                # C·∫¨P NH·∫¨T: Logic l·ªçc theo l·ªõp ƒë√£ ch·ªçn t·ª´ selectbox
                if class_selection != "T·∫•t c·∫£":
                    results_df = results_df[results_df['L·ªõp'] == class_selection]

                st.markdown("---")
                if not results_df.empty:
                    st.success(f"T√¨m th·∫•y {len(results_df)} k·∫øt qu·∫£ ph√π h·ª£p:")
                    display_cols = [col for col in df_students.columns if col != 'H·ªç v√† t√™n']
                    st.dataframe(results_df[display_cols])
                else:
                    st.info("Kh√¥ng t√¨m th·∫•y h·ªçc sinh n√†o ph√π h·ª£p v·ªõi th√¥ng tin ƒë√£ nh·∫≠p.")
    else:
        st.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu h·ªçc sinh t·ª´ Google Sheet.")
