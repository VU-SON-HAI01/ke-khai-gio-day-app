def render_schedule_details(schedule_df, client, spreadsheet_id, mode='class'):
    """H√†m hi·ªÉn th·ªã chi ti·∫øt l·ªãch h·ªçc, c√≥ tooltip cho m√¥n h·ªçc."""
    inject_tooltip_css()
    number_to_day_map = {
        2: '2Ô∏è‚É£ TH·ª® HAI', 3: '3Ô∏è‚É£ TH·ª® BA', 4: '4Ô∏è‚É£ TH·ª® T∆Ø',
        5: '5Ô∏è‚É£ TH·ª® NƒÇM', 6: '6Ô∏è‚É£ TH·ª® S√ÅU', 7: '7Ô∏è‚É£ TH·ª® B·∫¢Y'
    }
    schedule_df['Th·ª© ƒê·∫ßy ƒê·ªß'] = schedule_df['Th·ª©'].map(number_to_day_map)
    day_order = list(number_to_day_map.values())
    session_order = ['S√°ng', 'Chi·ªÅu']
    schedule_df['Th·ª© ƒê·∫ßy ƒê·ªß'] = pd.Categorical(schedule_df['Th·ª© ƒê·∫ßy ƒê·ªß'], categories=day_order, ordered=True)
    if 'Bu·ªïi' in schedule_df.columns:
        schedule_df['Bu·ªïi'] = pd.Categorical(schedule_df['Bu·ªïi'], categories=session_order, ordered=True)
        schedule_sorted = schedule_df.sort_values(by=['Th·ª© ƒê·∫ßy ƒê·ªß', 'Bu·ªïi', 'Ti·∫øt'])
    else:
        schedule_sorted = schedule_df.sort_values(by=['Th·ª© ƒê·∫ßy ƒê·ªß', 'Ti·∫øt'])

    for day, day_group in schedule_sorted.groupby('Th·ª© ƒê·∫ßy ƒê·ªß', observed=False):
        if day_group.get('M√¥n h·ªçc', pd.Series()).dropna().empty: continue
        st.markdown(f"##### <b>{day}</b> <span style='color:white; font-weight: normal; margin-left: 10px;'>--------------------</span>", unsafe_allow_html=True)
        for session, session_group in day_group.groupby('Bu·ªïi', observed=False):
            if session_group.get('M√¥n h·ªçc', pd.Series()).dropna().empty: continue
            color = "#28a745" if session == "S√°ng" else "#dc3545"
            st.markdown(f'<p style="color:{color}; font-weight:bold;">{session.upper()}</p>', unsafe_allow_html=True)
            
            subjects_in_session = {}
            for _, row in session_group.iterrows():
                mon_hoc_hop_le = pd.notna(row.get('M√¥n h·ªçc')) and str(row.get('M√¥n h·ªçc')).strip()
                tiet_hop_le = pd.notna(row.get('Ti·∫øt')) and str(row.get('Ti·∫øt')).strip()

                if mon_hoc_hop_le and tiet_hop_le:
                    key = (row.get('M√¥n h·ªçc'), row.get('Gi√°o vi√™n BM'), row.get('Ph√≤ng h·ªçc'), row.get('Ghi ch√∫'), row.get('Ng√†y √°p d·ª•ng', ''), row.get('L·ªõp', ''))
                    if key not in subjects_in_session:
                        subjects_in_session[key] = []
                    subjects_in_session[key].append(str(int(float(row['Ti·∫øt']))))
            
            if not subjects_in_session:
                st.markdown("&nbsp;&nbsp;‚ú®Ngh·ªâ")
            else:
                for (subject, gv, phong, ghi_chu, ngay_ap_dung, lop), tiet_list in subjects_in_session.items():
                    with st.container():
                        tiet_str = ", ".join(sorted(tiet_list, key=int))
                        display_schedule_item("üìñ M√¥n:", subject, client=client, spreadsheet_id=spreadsheet_id)
                        display_schedule_item("‚è∞ Ti·∫øt:", tiet_str)
                        
                        if mode == 'class' and gv:
                            display_schedule_item("üßë‚Äçüíº GV:", gv)
                        elif mode == 'teacher' and lop:
                            display_schedule_item("üìù L·ªõp:", lop)
                        
                        if phong: 
                            display_schedule_item("üè§ Ph√≤ng:", phong)

                        # *** LOGIC M·ªöI ƒê∆Ø·ª¢C C·∫¨P NH·∫¨T T·∫†I ƒê√ÇY ***
                        # ∆Øu ti√™n 1: Ki·ªÉm tra "Ch·ªâ h·ªçc"
                        if ghi_chu and "ch·ªâ h·ªçc" in str(ghi_chu).lower():
                            date_match = re.search(r'(\d+/\d+)', str(ghi_chu))
                            if date_match:
                                display_schedule_item("üìå Ch·ªâ h·ªçc ng√†y:", f"\"{date_match.group(1)}\"")
                        # ∆Øu ti√™n 2: Ki·ªÉm tra "h·ªçc t·ª´"
                        elif ghi_chu and "h·ªçc t·ª´" in str(ghi_chu).lower():
                            date_match = re.search(r'(\d+/\d+)', str(ghi_chu))
                            if date_match:
                                display_schedule_item("üîú B·∫Øt ƒë·∫ßu h·ªçc t·ª´:", f"\"{date_match.group(1)}\"")
                        # Tr∆∞·ªùng h·ª£p c√≤n l·∫°i: Hi·ªÉn th·ªã ghi ch√∫ chung (n·∫øu c√≥)
                        elif ghi_chu and str(ghi_chu).strip():
                            display_schedule_item("üìù Ghi ch√∫:", ghi_chu)
                        
                        st.markdown("<br>", unsafe_allow_html=True)
