# Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
import streamlit as st
import pandas as pd
import openpyxl
import io

# --- C√ÅC H√ÄM H·ªñ TR·ª¢ ---

def extract_schedule_from_excel(worksheet):
    """
    Tr√≠ch xu·∫•t d·ªØ li·ªáu TKB t·ª´ m·ªôt worksheet, t·ª± ƒë·ªông t√¨m v√πng d·ªØ li·ªáu v√† x·ª≠ l√Ω √¥ g·ªôp.
    """
    
    # --- B∆∞·ªõc 1: T√¨m ƒëi·ªÉm b·∫Øt ƒë·∫ßu c·ªßa b·∫£ng d·ªØ li·ªáu (√¥ ch·ª©a "Th·ª©") ---
    start_row, start_col = -1, -1
    for r_idx, row in enumerate(worksheet.iter_rows(min_row=1, max_row=10), 1):
        for c_idx, cell in enumerate(row, 1):
            if cell.value and "th·ª©" in str(cell.value).lower():
                start_row, start_col = r_idx, c_idx
                break
        if start_row != -1:
            break
            
    if start_row == -1:
        st.error("Kh√¥ng t√¨m th·∫•y √¥ ti√™u ƒë·ªÅ 'Th·ª©' trong 10 d√≤ng ƒë·∫ßu ti√™n c·ªßa file.")
        return None

    # --- B∆∞·ªõc 2: T√¨m ƒëi·ªÉm k·∫øt th√∫c c·ªßa b·∫£ng d·ªØ li·ªáu ---
    last_row = start_row
    tiet_col_index = start_col + 2 
    for r_idx in range(worksheet.max_row, start_row - 1, -1):
        cell_value = worksheet.cell(row=r_idx, column=tiet_col_index).value
        if cell_value is not None and isinstance(cell_value, (int, float)):
            last_row = r_idx
            break

    last_col = start_col
    for row in worksheet.iter_rows(min_row=start_row, max_row=last_row):
        for cell in row:
            if cell.value is not None and cell.column > last_col:
                last_col = cell.column

    # --- B∆∞·ªõc 3: X·ª≠ l√Ω c√°c √¥ b·ªã g·ªôp (merged cells) ---
    merged_values = {}
    for merged_range in worksheet.merged_cells.ranges:
        top_left_cell = worksheet.cell(row=merged_range.min_row, column=merged_range.min_col)
        for row in range(merged_range.min_row, merged_range.max_row + 1):
            for col in range(merged_range.min_col, merged_range.max_col + 1):
                merged_values[(row, col)] = top_left_cell.value

    # --- B∆∞·ªõc 4: ƒê·ªçc d·ªØ li·ªáu v√†o m·ªôt danh s√°ch 2D, √°p d·ª•ng gi√° tr·ªã t·ª´ √¥ g·ªôp ---
    data = []
    for r_idx in range(start_row, last_row + 1):
        row_data = []
        for c_idx in range(start_col, last_col + 1):
            if (r_idx, c_idx) in merged_values:
                row_data.append(merged_values[(r_idx, c_idx)])
            else:
                row_data.append(worksheet.cell(row=r_idx, column=c_idx).value)
        data.append(row_data)

    if not data:
        return None

    # --- B∆∞·ªõc 5: Chuy·ªÉn ƒë·ªïi th√†nh DataFrame ---
    df = pd.DataFrame(data[1:], columns=data[0])
    
    return df

def transform_to_database_format(df_wide):
    """
    Chuy·ªÉn ƒë·ªïi DataFrame d·∫°ng r·ªông (wide) sang d·∫°ng d√†i (long) ƒë·ªÉ d·ªÖ truy v·∫•n.
    """
    # L·∫•y c√°c c·ªôt c·ªë ƒë·ªãnh l√†m id_vars
    id_vars = []
    for col in ['Th·ª©', 'Bu·ªïi', 'Ti·∫øt']:
        if col in df_wide.columns:
            id_vars.append(col)
    
    if not id_vars:
        st.error("DataFrame thi·∫øu c√°c c·ªôt 'Th·ª©', 'Bu·ªïi', ho·∫∑c 'Ti·∫øt' ƒë·ªÉ chuy·ªÉn ƒë·ªïi.")
        return None

    # Chuy·ªÉn ƒë·ªïi t·ª´ d·∫°ng r·ªông sang d·∫°ng d√†i
    df_long = pd.melt(df_wide, id_vars=id_vars, var_name='L·ªõp', value_name='M√¥n h·ªçc')
    
    # L√†m s·∫°ch d·ªØ li·ªáu
    df_long.dropna(subset=['M√¥n h·ªçc'], inplace=True)
    df_long = df_long[df_long['M√¥n h·ªçc'].astype(str).str.strip() != '']
    
    return df_long

# --- Giao di·ªán ·ª©ng d·ª•ng Streamlit ---

# ƒê·∫∑t ti√™u ƒë·ªÅ cho ·ª©ng d·ª•ng
st.set_page_config(page_title="Tr√≠ch xu·∫•t v√† Truy v·∫•n TKB", layout="wide")
st.title("üìä Tr√≠ch xu·∫•t v√† Truy v·∫•n Th·ªùi Kh√≥a Bi·ªÉu")
st.write("T·∫£i file Excel TKB, ·ª©ng d·ª•ng s·∫Ω t·ª± ƒë·ªông chuy·ªÉn ƒë·ªïi th√†nh c∆° s·ªü d·ªØ li·ªáu v√† cho ph√©p b·∫°n tra c·ª©u th√¥ng tin chi ti·∫øt.")

# T·∫°o m·ªôt c·ªôt ƒë·ªÉ ng∆∞·ªùi d√πng t·∫£i file l√™n
uploaded_file = st.file_uploader("Ch·ªçn file Excel c·ªßa b·∫°n", type=["xlsx"])

# Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ t·∫£i file l√™n ch∆∞a
if uploaded_file is not None:
    try:
        file_bytes = io.BytesIO(uploaded_file.getvalue())
        workbook = openpyxl.load_workbook(file_bytes, data_only=True)
        sheet = workbook.active

        st.success(f"ƒê√£ ƒë·ªçc th√†nh c√¥ng file: **{uploaded_file.name}**")
        
        with st.spinner("ƒêang t√¨m v√† x·ª≠ l√Ω d·ªØ li·ªáu..."):
            # Tr√≠ch xu·∫•t d·ªØ li·ªáu th√¥ ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω √¥ g·ªôp
            raw_df = extract_schedule_from_excel(sheet)

        if raw_df is not None:
            # Chuy·ªÉn ƒë·ªïi sang d·∫°ng CSDL
            db_df = transform_to_database_format(raw_df)

            if db_df is not None:
                st.markdown("---")
                st.header("üîç Tra c·ª©u Th·ªùi Kh√≥a Bi·ªÉu")
                
                # L·∫•y danh s√°ch l·ªõp duy nh·∫•t ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn
                class_list = sorted(db_df['L·ªõp'].unique())
                selected_class = st.selectbox("Ch·ªçn l·ªõp ƒë·ªÉ xem chi ti·∫øt:", options=class_list)

                if selected_class:
                    # L·ªçc CSDL theo l·ªõp ƒë√£ ch·ªçn
                    class_schedule = db_df[db_df['L·ªõp'] == selected_class]
                    
                    # S·∫Øp x·∫øp l·∫°i ƒë·ªÉ d·ªÖ nh√¨n
                    class_schedule_sorted = class_schedule.sort_values(by=['Th·ª©', 'Bu·ªïi', 'Ti·∫øt'])
                    
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£
                    st.dataframe(
                        class_schedule_sorted[['Th·ª©', 'Bu·ªïi', 'Ti·∫øt', 'M√¥n h·ªçc']],
                        use_container_width=True,
                        hide_index=True
                    )
                
                # Hi·ªÉn th·ªã d·ªØ li·ªáu d·∫°ng CSDL (c√≥ th·ªÉ ·∫©n ƒëi n·∫øu mu·ªën)
                with st.expander("Xem to√†n b·ªô d·ªØ li·ªáu d·∫°ng C∆° s·ªü d·ªØ li·ªáu"):
                    st.dataframe(db_df, use_container_width=True, hide_index=True)
            
            # Hi·ªÉn th·ªã d·ªØ li·ªáu g·ªëc ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω √¥ g·ªôp
            with st.expander("Xem d·ªØ li·ªáu g·ªëc (ƒë√£ x·ª≠ l√Ω √¥ g·ªôp)"):
                st.dataframe(raw_df)
        else:
            st.warning("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë·ªãnh d·∫°ng file c·ªßa b·∫°n.")

    except Exception as e:
        st.error(f"ƒê√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω file: {e}")
