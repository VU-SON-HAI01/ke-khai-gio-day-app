# Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
import streamlit as st
import pandas as pd
import openpyxl
import io
import re

# --- C√ÅC H√ÄM H·ªñ TR·ª¢ ---

def extract_schedule_from_excel(worksheet):
    """
    Tr√≠ch xu·∫•t d·ªØ li·ªáu TKB t·ª´ m·ªôt worksheet, t·ª± ƒë·ªông t√¨m v√πng d·ªØ li·ªáu, 
    x·ª≠ l√Ω √¥ g·ªôp v√† x·ª≠ l√Ω ti√™u ƒë·ªÅ ƒëa d√≤ng.
    """
    
    # --- B∆∞·ªõc 1: T√¨m ƒëi·ªÉm b·∫Øt ƒë·∫ßu c·ªßa b·∫£ng d·ªØ li·ªáu (√¥ ch·ª©a "Th·ª©") ---
    start_row, start_col = -1, -1
    for r_idx, row in enumerate(worksheet.iter_rows(min_row=1, max_row=10), 1):
        for c_idx, cell in enumerate(row, 1):
            if cell.value and "th·ª©" in str(cell.value).lower():
                start_row, start_col = r_idx, c_idx
                break
        if start_row != -1:
            break
            
    if start_row == -1:
        st.error("Kh√¥ng t√¨m th·∫•y √¥ ti√™u ƒë·ªÅ 'Th·ª©' trong 10 d√≤ng ƒë·∫ßu ti√™n c·ªßa file.")
        return None

    # --- B∆∞·ªõc 2: T√¨m ƒëi·ªÉm k·∫øt th√∫c c·ªßa b·∫£ng d·ªØ li·ªáu ---
    last_row = start_row
    tiet_col_index = start_col + 2 
    for r_idx in range(worksheet.max_row, start_row - 1, -1):
        cell_value = worksheet.cell(row=r_idx, column=tiet_col_index).value
        if cell_value is not None and isinstance(cell_value, (int, float)):
            last_row = r_idx
            break

    last_col = start_col
    for row in worksheet.iter_rows(min_row=start_row, max_row=last_row):
        for cell in row:
            if cell.value is not None and cell.column > last_col:
                last_col = cell.column

    # --- B∆∞·ªõc 3: X·ª≠ l√Ω c√°c √¥ b·ªã g·ªôp (merged cells) ---
    merged_values = {}
    for merged_range in worksheet.merged_cells.ranges:
        top_left_cell = worksheet.cell(row=merged_range.min_row, column=merged_range.min_col)
        for row in range(merged_range.min_row, merged_range.max_row + 1):
            for col in range(merged_range.min_col, merged_range.max_col + 1):
                merged_values[(row, col)] = top_left_cell.value

    # --- B∆∞·ªõc 4: ƒê·ªçc d·ªØ li·ªáu v√†o m·ªôt danh s√°ch 2D, √°p d·ª•ng gi√° tr·ªã t·ª´ √¥ g·ªôp ---
    data = []
    # ƒê·ªçc t·ª´ d√≤ng ti√™u ƒë·ªÅ ƒë·∫ßu ti√™n ƒë·ªÉ bao g·ªìm c·∫£ 2 d√≤ng header
    for r_idx in range(start_row, last_row + 1):
        row_data = []
        for c_idx in range(start_col, last_col + 1):
            if (r_idx, c_idx) in merged_values:
                row_data.append(merged_values[(r_idx, c_idx)])
            else:
                row_data.append(worksheet.cell(row=r_idx, column=c_idx).value)
        data.append(row_data)

    if not data:
        return None

    # --- B∆∞·ªõc 5: X·ª≠ l√Ω ti√™u ƒë·ªÅ ƒëa d√≤ng v√† t·∫°o DataFrame ---
    header_level1 = data[0]
    header_level2 = data[1]
    
    # ƒêi·ªÅn c√°c gi√° tr·ªã b·ªã thi·∫øu trong header c·∫•p 1 (do g·ªôp √¥)
    filled_header_level1 = []
    last_val = ""
    for val in header_level1:
        if val is not None and str(val).strip() != '':
            last_val = val
        filled_header_level1.append(last_val)

    # K·∫øt h·ª£p 2 d√≤ng ti√™u ƒë·ªÅ th√†nh m·ªôt, d√πng k√Ω t·ª± ƒë·∫∑c bi·ªát ƒë·ªÉ sau n√†y t√°ch ra
    combined_headers = []
    for i in range(len(filled_header_level1)):
        h1 = str(filled_header_level1[i] or '').strip()
        h2 = str(header_level2[i] or '').strip()
        # ƒê·ªëi v·ªõi c√°c c·ªôt l·ªõp h·ªçc, k·∫øt h·ª£p c·∫£ 2 d√≤ng. C√°c c·ªôt kh√°c gi·ªØ nguy√™n.
        if i >= 3: # Gi·∫£ ƒë·ªãnh c√°c c·ªôt l·ªõp h·ªçc b·∫Øt ƒë·∫ßu t·ª´ c·ªôt th·ª© 4
             combined_headers.append(f"{h1}___{h2}")
        else:
             combined_headers.append(h1)

    # D·ªØ li·ªáu th·ª±c t·∫ø b·∫Øt ƒë·∫ßu t·ª´ d√≤ng th·ª© 3 (index 2)
    actual_data = data[2:]
    
    df = pd.DataFrame(actual_data, columns=combined_headers)
    
    return df

def transform_to_database_format(df_wide):
    """
    Chuy·ªÉn ƒë·ªïi DataFrame d·∫°ng r·ªông (wide) sang d·∫°ng d√†i (long) v√† t√°ch th√¥ng tin chi ti·∫øt.
    """
    id_vars = ['Th·ª©', 'Bu·ªïi', 'Ti·∫øt']
    
    # Chuy·ªÉn ƒë·ªïi t·ª´ d·∫°ng r·ªông sang d·∫°ng d√†i
    df_long = pd.melt(df_wide, id_vars=id_vars, var_name='L·ªõp_Raw', value_name='Chi ti·∫øt M√¥n h·ªçc')
    
    # L√†m s·∫°ch d·ªØ li·ªáu ban ƒë·∫ßu
    df_long.dropna(subset=['Chi ti·∫øt M√¥n h·ªçc'], inplace=True)
    df_long = df_long[df_long['Chi ti·∫øt M√¥n h·ªçc'].astype(str).str.strip() != '']
    
    # --- T√ÅCH D·ªÆ LI·ªÜU T·ª™ TI√äU ƒê·ªÄ (L·ªõp_Raw) ---
    header_parts = df_long['L·ªõp_Raw'].str.split('___', expand=True)
    
    # T√°ch L·ªõp v√† Sƒ© s·ªë t·ª´ ph·∫ßn 1
    lop_pattern = re.compile(r'^(.*?)\s*(?:\((\d+)\))?$') # Sƒ© s·ªë l√† t√πy ch·ªçn
    lop_extracted = header_parts[0].str.extract(lop_pattern)
    lop_extracted.columns = ['L·ªõp', 'Sƒ© s·ªë']

    # T√°ch th√¥ng tin ch·ªß nhi·ªám t·ª´ ph·∫ßn 2 (linh ho·∫°t h∆°n)
    cn_pattern = re.compile(r'^(.*?)\s*-\s*(.*?)(?:\s*\((.*?)\))?$') # L·ªõp VHPT l√† t√πy ch·ªçn
    cn_extracted = header_parts[1].str.extract(cn_pattern)
    cn_extracted.columns = ['Ph√≤ng SHCN', 'Gi√°o vi√™n CN', 'L·ªõp VHPT']
    
    # --- T√ÅCH D·ªÆ LI·ªÜU T·ª™ N·ªòI DUNG √î (Chi ti·∫øt M√¥n h·ªçc) ---
    mh_pattern = re.compile(r'^(.*?)\s*\((.*?)\s*-\s*(.*?)\)$')
    mh_extracted = df_long['Chi ti·∫øt M√¥n h·ªçc'].astype(str).str.extract(mh_pattern)
    mh_extracted.columns = ['M√¥n h·ªçc T√°ch', 'Ph√≤ng h·ªçc', 'Gi√°o vi√™n BM']

    # Gh√©p t·∫•t c·∫£ c√°c ph·∫ßn ƒë√£ t√°ch v√†o DataFrame ch√≠nh
    df_final = pd.concat([
        df_long[['Th·ª©', 'Bu·ªïi', 'Ti·∫øt']].reset_index(drop=True), 
        lop_extracted.reset_index(drop=True),
        cn_extracted.reset_index(drop=True), 
        mh_extracted.reset_index(drop=True),
        df_long[['Chi ti·∫øt M√¥n h·ªçc']].reset_index(drop=True)
    ], axis=1)

    # --- T·∫†O C√ÅC C·ªòT CU·ªêI C√ôNG ---
    # C·ªôt M√¥n h·ªçc
    df_final['M√¥n h·ªçc'] = df_final['M√¥n h·ªçc T√°ch'].fillna(df_final['Chi ti·∫øt M√¥n h·ªçc'])
    
    # C·ªôt Tr√¨nh ƒë·ªô
    def get_trinh_do(class_name):
        if 'C.' in str(class_name):
            return 'Cao ƒë·∫≥ng'
        if 'T.' in str(class_name):
            return 'Trung C·∫•p'
        return ''
    df_final['Tr√¨nh ƒë·ªô'] = df_final['L·ªõp'].apply(get_trinh_do)
    
    # S·∫Øp x·∫øp v√† ch·ªçn c√°c c·ªôt c·∫ßn thi·∫øt
    final_cols = [
        'Th·ª©', 'Bu·ªïi', 'Ti·∫øt', 'L·ªõp', 'Sƒ© s·ªë', 'Tr√¨nh ƒë·ªô', 'M√¥n h·ªçc', 
        'Ph√≤ng h·ªçc', 'Gi√°o vi√™n BM', 'Ph√≤ng SHCN', 'Gi√°o vi√™n CN', 'L·ªõp VHPT'
    ]
    df_final = df_final[final_cols]
    
    # ƒêi·ªÅn gi√° tr·ªã r·ªóng cho c√°c √¥ kh√¥ng c√≥ d·ªØ li·ªáu
    df_final.fillna('', inplace=True)
    
    return df_final

# --- Giao di·ªán ·ª©ng d·ª•ng Streamlit ---

st.set_page_config(page_title="Tr√≠ch xu·∫•t v√† Truy v·∫•n TKB", layout="wide")
st.title("üìä Tr√≠ch xu·∫•t v√† Truy v·∫•n Th·ªùi Kh√≥a Bi·ªÉu")
st.write("T·∫£i file Excel TKB, ·ª©ng d·ª•ng s·∫Ω t·ª± ƒë·ªông chuy·ªÉn ƒë·ªïi th√†nh c∆° s·ªü d·ªØ li·ªáu v√† cho ph√©p b·∫°n tra c·ª©u th√¥ng tin chi ti·∫øt.")

uploaded_file = st.file_uploader("Ch·ªçn file Excel c·ªßa b·∫°n", type=["xlsx"])

if uploaded_file is not None:
    try:
        file_bytes = io.BytesIO(uploaded_file.getvalue())
        workbook = openpyxl.load_workbook(file_bytes, data_only=True)
        sheet = workbook.active

        st.success(f"ƒê√£ ƒë·ªçc th√†nh c√¥ng file: **{uploaded_file.name}**")
        
        with st.spinner("ƒêang t√¨m v√† x·ª≠ l√Ω d·ªØ li·ªáu..."):
            raw_df = extract_schedule_from_excel(sheet)

        if raw_df is not None:
            db_df = transform_to_database_format(raw_df)

            if db_df is not None:
                st.markdown("---")
                st.header("üîç Tra c·ª©u Th·ªùi Kh√≥a Bi·ªÉu")
                
                class_list = sorted(db_df['L·ªõp'].unique())
                selected_class = st.selectbox("Ch·ªçn l·ªõp ƒë·ªÉ xem chi ti·∫øt:", options=class_list)

                if selected_class:
                    class_schedule = db_df[db_df['L·ªõp'] == selected_class]
                    class_schedule_sorted = class_schedule.sort_values(by=['Th·ª©', 'Bu·ªïi', 'Ti·∫øt'])
                    
                    display_columns = [
                        'Th·ª©', 'Bu·ªïi', 'Ti·∫øt', 'M√¥n h·ªçc', 'Ph√≤ng h·ªçc', 'Gi√°o vi√™n BM', 
                        'Sƒ© s·ªë', 'Tr√¨nh ƒë·ªô', 'Ph√≤ng SHCN', 'Gi√°o vi√™n CN', 'L·ªõp VHPT'
                    ]
                    
                    st.dataframe(
                        class_schedule_sorted[display_columns],
                        use_container_width=True,
                        hide_index=True
                    )
                
                with st.expander("Xem to√†n b·ªô d·ªØ li·ªáu d·∫°ng C∆° s·ªü d·ªØ li·ªáu"):
                    st.dataframe(db_df, use_container_width=True, hide_index=True)
            
            with st.expander("Xem d·ªØ li·ªáu g·ªëc (ƒë√£ x·ª≠ l√Ω √¥ g·ªôp v√† ti√™u ƒë·ªÅ)"):
                st.dataframe(raw_df)
        else:
            st.warning("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë·ªãnh d·∫°ng file c·ªßa b·∫°n.")

    except Exception as e:
        st.error(f"ƒê√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω file: {e}")
