# Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
import streamlit as st
import pandas as pd
import openpyxl
import io
import re
import gspread
from google.oauth2.service_account import Credentials

# --- C√ÅC H√ÄM K·∫æT N·ªêI GOOGLE SHEETS ---

# S·ª≠ d·ª•ng cache_resource ƒë·ªÉ ch·ªâ k·∫øt n·ªëi m·ªôt l·∫ßn
@st.cache_resource
def connect_to_gsheet():
    """
    K·∫øt n·ªëi t·ªõi Google Sheets s·ª≠ d·ª•ng Service Account credentials t·ª´ st.secrets.
    """
    try:
        creds_dict = st.secrets["gcp_service_account"]
        creds = Credentials.from_service_account_info(
            creds_dict,
            scopes=["https://www.googleapis.com/auth/spreadsheets"],
        )
        client = gspread.authorize(creds)
        return client
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi Google Sheets: {e}")
        st.info("Vui l√≤ng ƒë·∫£m b·∫£o b·∫°n ƒë√£ c·∫•u h√¨nh 'gcp_service_account' trong st.secrets.")
        return None

# S·ª≠ d·ª•ng cache_data ƒë·ªÉ cache d·ªØ li·ªáu tr·∫£ v·ªÅ
@st.cache_data(ttl=600) # Cache d·ªØ li·ªáu trong 10 ph√∫t
def get_teacher_mapping(_gsheet_client, spreadsheet_id):
    """
    L·∫•y d·ªØ li·ªáu √°nh x·∫° t√™n gi√°o vi√™n t·ª´ Google Sheet v√† t·∫°o m·ªôt dictionary.
    """
    if _gsheet_client is None:
        return {}
    try:
        spreadsheet = _gsheet_client.open_by_key(spreadsheet_id)
        worksheet = spreadsheet.worksheet("THONG_TIN_GV")
        df = pd.DataFrame(worksheet.get_all_records())
        
        required_cols = ["Ten_viet_tat", "Ho_ten_gv"]
        actual_cols = df.columns.tolist()
        missing_cols = [col for col in required_cols if col not in actual_cols]
        
        if missing_cols:
            st.error(f"L·ªói: Sheet 'THONG_TIN_GV' b·ªã thi·∫øu c√°c c·ªôt b·∫Øt bu·ªôc: {', '.join(missing_cols)}.")
            st.info(f"C√°c c·ªôt hi·ªán c√≥ trong sheet l√†: {', '.join(actual_cols)}")
            st.warning("Vui l√≤ng ki·ªÉm tra l·∫°i t√™n c·ªôt trong file Google Sheet c·ªßa b·∫°n.")
            return {}
            
        mapping = pd.Series(df.Ho_ten_gv.values, index=df.Ten_viet_tat.str.strip()).to_dict()
        return mapping
    except gspread.exceptions.WorksheetNotFound:
        st.error("L·ªói: Kh√¥ng t√¨m th·∫•y sheet c√≥ t√™n 'THONG_TIN_GV' trong file Google Sheet.")
        return {}
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i b·∫£n ƒë·ªì t√™n gi√°o vi√™n t·ª´ Google Sheet: {e}")
        return {}

# --- C√ÅC H√ÄM X·ª¨ L√ù EXCEL ---

def extract_schedule_from_excel(worksheet):
    """
    Tr√≠ch xu·∫•t d·ªØ li·ªáu TKB t·ª´ m·ªôt worksheet, t·ª± ƒë·ªông t√¨m v√πng d·ªØ li·ªáu, 
    x·ª≠ l√Ω √¥ g·ªôp v√† x·ª≠ l√Ω ti√™u ƒë·ªÅ ƒëa d√≤ng.
    """
    start_row, start_col = -1, -1
    for r_idx, row in enumerate(worksheet.iter_rows(min_row=1, max_row=10), 1):
        for c_idx, cell in enumerate(row, 1):
            if cell.value and "th·ª©" in str(cell.value).lower():
                start_row, start_col = r_idx, c_idx
                break
        if start_row != -1:
            break
            
    if start_row == -1:
        st.error("Kh√¥ng t√¨m th·∫•y √¥ ti√™u ƒë·ªÅ 'Th·ª©' trong 10 d√≤ng ƒë·∫ßu ti√™n c·ªßa file.")
        return None

    last_row = start_row
    tiet_col_index = start_col + 2 
    for r_idx in range(worksheet.max_row, start_row - 1, -1):
        cell_value = worksheet.cell(row=r_idx, column=tiet_col_index).value
        if cell_value is not None and isinstance(cell_value, (int, float)):
            last_row = r_idx
            break

    last_col = start_col
    for row in worksheet.iter_rows(min_row=start_row, max_row=last_row):
        for cell in row:
            if cell.value is not None and cell.column > last_col:
                last_col = cell.column

    merged_values = {}
    for merged_range in worksheet.merged_cells.ranges:
        top_left_cell = worksheet.cell(row=merged_range.min_row, column=merged_range.min_col)
        for row in range(merged_range.min_row, merged_range.max_row + 1):
            for col in range(merged_range.min_col, merged_range.max_col + 1):
                merged_values[(row, col)] = top_left_cell.value

    day_to_number_map = {'HAI': 2, 'BA': 3, 'T∆Ø': 4, 'NƒÇM': 5, 'S√ÅU': 6, 'B·∫¢Y': 7}
    data = []
    for r_idx in range(start_row, last_row + 1):
        row_data = []
        for c_idx in range(start_col, last_col + 1):
            cell_value = merged_values.get((r_idx, c_idx), worksheet.cell(row=r_idx, column=c_idx).value)
            
            if c_idx == start_col and r_idx > start_row:
                clean_day = re.sub(r'\s+', '', str(cell_value or '')).strip().upper()
                cell_value = day_to_number_map.get(clean_day, cell_value)

            row_data.append(cell_value)
        data.append(row_data)

    if not data:
        return None

    header_level1 = data[0]
    header_level2 = data[1]
    
    filled_header_level1 = []
    last_val = ""
    for val in header_level1:
        if val is not None and str(val).strip() != '':
            last_val = val
        filled_header_level1.append(last_val)

    combined_headers = []
    for i in range(len(filled_header_level1)):
        h1 = str(filled_header_level1[i] or '').strip()
        h2 = str(header_level2[i] or '').strip()
        if i >= 3:
             combined_headers.append(f"{h1}___{h2}")
        else:
             combined_headers.append(h1)

    actual_data = data[2:]
    df = pd.DataFrame(actual_data, columns=combined_headers)
    
    return df

def map_and_prefix_teacher_name(short_name, mapping):
    """
    √Ånh x·∫° t√™n vi·∫øt t·∫Øt sang t√™n ƒë·∫ßy ƒë·ªß v√† th√™m ti·ªÅn t·ªë 'Th·∫ßy'/'C√¥'.
    """
    short_name_clean = str(short_name or '').strip()
    if not short_name_clean:
        return ''
        
    full_name = mapping.get(short_name_clean)
    
    if full_name:
        if short_name_clean.startswith('T.'):
            return f"Th·∫ßy {full_name}"
        elif short_name_clean.startswith('C.'):
            return f"C√¥ {full_name}"
        else:
            return full_name
    else:
        return short_name_clean

def transform_to_database_format(df_wide, teacher_mapping):
    """
    Chuy·ªÉn ƒë·ªïi DataFrame d·∫°ng r·ªông (wide) sang d·∫°ng d√†i (long) v√† t√°ch th√¥ng tin chi ti·∫øt.
    """
    id_vars = ['Th·ª©', 'Bu·ªïi', 'Ti·∫øt']
    
    df_long = pd.melt(df_wide, id_vars=id_vars, var_name='L·ªõp_Raw', value_name='Chi ti·∫øt M√¥n h·ªçc')
    
    df_long.dropna(subset=['Chi ti·∫øt M√¥n h·ªçc'], inplace=True)
    df_long = df_long[df_long['Chi ti·∫øt M√¥n h·ªçc'].astype(str).str.strip() != '']
    
    header_parts = df_long['L·ªõp_Raw'].str.split('___', expand=True)
    
    lop_pattern = re.compile(r'^(.*?)\s*(?:\((\d+)\))?$')
    lop_extracted = header_parts[0].str.extract(lop_pattern)
    lop_extracted.columns = ['L·ªõp', 'Sƒ© s·ªë']

    cn_pattern = re.compile(r'^(.*?)\s*-\s*(.*?)(?:\s*\((.*?)\))?$')
    cn_extracted = header_parts[1].str.extract(cn_pattern)
    cn_extracted.columns = ['Ph√≤ng SHCN', 'Gi√°o vi√™n CN', 'L·ªõp VHPT']
    
    mh_pattern = re.compile(r'^(.*?)\s*\((.*?)\s*-\s*(.*?)\)$')
    mh_extracted = df_long['Chi ti·∫øt M√¥n h·ªçc'].astype(str).str.extract(mh_pattern)
    mh_extracted.columns = ['M√¥n h·ªçc T√°ch', 'Ph√≤ng h·ªçc', 'Gi√°o vi√™n BM']

    df_final = pd.concat([
        df_long[['Th·ª©', 'Bu·ªïi', 'Ti·∫øt']].reset_index(drop=True), 
        lop_extracted.reset_index(drop=True),
        cn_extracted.reset_index(drop=True), 
        mh_extracted.reset_index(drop=True),
        df_long[['Chi ti·∫øt M√¥n h·ªçc']].reset_index(drop=True)
    ], axis=1)

    df_final['M√¥n h·ªçc'] = df_final['M√¥n h·ªçc T√°ch'].fillna(df_final['Chi ti·∫øt M√¥n h·ªçc'])
    
    def get_trinh_do(class_name):
        if 'C.' in str(class_name):
            return 'Cao ƒë·∫≥ng'
        if 'T.' in str(class_name):
            return 'Trung C·∫•p'
        return ''
    df_final['Tr√¨nh ƒë·ªô'] = df_final['L·ªõp'].apply(get_trinh_do)

    if teacher_mapping:
        df_final['Gi√°o vi√™n CN'] = df_final['Gi√°o vi√™n CN'].apply(lambda name: map_and_prefix_teacher_name(name, teacher_mapping))
        df_final['Gi√°o vi√™n BM'] = df_final['Gi√°o vi√™n BM'].apply(lambda name: map_and_prefix_teacher_name(name, teacher_mapping))
    
    final_cols = [
        'Th·ª©', 'Bu·ªïi', 'Ti·∫øt', 'L·ªõp', 'Sƒ© s·ªë', 'Tr√¨nh ƒë·ªô', 'M√¥n h·ªçc', 
        'Ph√≤ng h·ªçc', 'Gi√°o vi√™n BM', 'Ph√≤ng SHCN', 'Gi√°o vi√™n CN', 'L·ªõp VHPT'
    ]
    df_final = df_final[final_cols]
    
    df_final.fillna('', inplace=True)
    
    return df_final

# ==============================================================================
# H√ÄM generate_schedule_summary ƒê√É ƒê∆Ø·ª¢C C·∫¨P NH·∫¨T THEO Y√äU C·∫¶U M·ªöI
# ==============================================================================
def generate_schedule_summary(schedule_df):
    """
    T·∫°o m·ªôt b·∫£n t√≥m t·∫Øt/di·ªÖn gi·∫£i th·ªùi kh√≥a bi·ªÉu t·ª´ DataFrame.
    Gom nh√≥m theo C·∫•p b·∫≠c:
        C·∫•p 1: Th·ª© (ƒë∆∞·ª£c s·∫Øp x·∫øp ƒë√∫ng th·ª© t·ª±)
        C·∫•p 2: Bu·ªïi (S√°ng, Chi·ªÅu)
        C·∫•p 3: M√¥n h·ªçc (bao g·ªìm th√¥ng tin chi ti·∫øt)
    """
    if schedule_df.empty:
        return "Kh√¥ng c√≥ d·ªØ li·ªáu th·ªùi kh√≥a bi·ªÉu ƒë·ªÉ hi·ªÉn th·ªã."

    # T·∫°o m·ªôt b·∫£n sao ƒë·ªÉ tr√°nh SettingWithCopyWarning
    df_class = schedule_df.copy()

    # --- 1. L·∫•y v√† hi·ªÉn th·ªã th√¥ng tin chung ---
    info = df_class.iloc[0]
    summary_parts = ["#### üìù Th√¥ng tin chung c·ªßa l·ªõp:"]
    
    general_info = [
        ("Gi√°o vi√™n CN", info.get("Gi√°o vi√™n CN")),
        ("L·ªõp VHPT", info.get("L·ªõp VHPT")),
        ("Ph√≤ng SHCN", info.get("Ph√≤ng SHCN")),
        ("Tr√¨nh ƒë·ªô", info.get("Tr√¨nh ƒë·ªô")),
        ("Sƒ© s·ªë", info.get("Sƒ© s·ªë"))
    ]
    
    for label, value in general_info:
        if value:
            summary_parts.append(f"- **{label}:** {value}")

    summary_parts.append("---")
    summary_parts.append("#### üóìÔ∏è L·ªãch h·ªçc chi ti·∫øt:")

    # --- 2. Chu·∫©n h√≥a v√† S·∫Øp x·∫øp ---
    number_to_day_map = {
        2: 'TH·ª® HAI', 3: 'TH·ª® BA', 4: 'TH·ª® T∆Ø',
        5: 'TH·ª® NƒÇM', 6: 'TH·ª® S√ÅU', 7: 'TH·ª® B·∫¢Y'
    }
    df_class['Th·ª© ƒê·∫ßy ƒê·ªß'] = df_class['Th·ª©'].map(number_to_day_map)
    
    day_order = list(number_to_day_map.values())
    df_class['Th·ª© ƒê·∫ßy ƒê·ªß'] = pd.Categorical(df_class['Th·ª© ƒê·∫ßy ƒê·ªß'], categories=day_order, ordered=True)
    df_class_sorted = df_class.sort_values(by=['Th·ª© ƒê·∫ßy ƒê·ªß', 'Bu·ªïi', 'Ti·∫øt'])
    
    # --- 3. Gom nh√≥m v√† ƒë·ªãnh d·∫°ng theo 3 c·∫•p ---
    # C·∫•p 1: Gom nh√≥m theo Th·ª©
    for day, day_group in df_class_sorted.groupby('Th·ª© ƒê·∫ßy ƒê·ªß', observed=True):
        summary_parts.append(f"**{day}:**")
        
        # C·∫•p 2: Gom nh√≥m theo Bu·ªïi
        for session, session_group in day_group.groupby('Bu·ªïi'):
            summary_parts.append(f"  - **{session}:**")
            
            subjects_in_session = {}
            for _, row in session_group.iterrows():
                subject = row['M√¥n h·ªçc']
                if pd.isna(subject) or str(subject).strip() == "":
                    continue

                # T·∫°o key duy nh·∫•t cho m·ªói m√¥n h·ªçc + gi√°o vi√™n + ph√≤ng
                subject_key = (subject, row['Gi√°o vi√™n BM'], row['Ph√≤ng h·ªçc'])

                if subject_key not in subjects_in_session:
                    subjects_in_session[subject_key] = []
                
                subjects_in_session[subject_key].append(str(row['Ti·∫øt']))

            # C·∫•p 3: ƒê·ªãnh d·∫°ng th√¥ng tin M√¥n h·ªçc
            if not subjects_in_session:
                summary_parts.append(f"    - *Kh√¥ng c√≥ ti·∫øt h·ªçc*")
            else:
                for (subject, gv, phong), tiet_list in subjects_in_session.items():
                    tiet_str = ", ".join(sorted(tiet_list, key=int))
                    
                    summary_parts.append(f"    - **M√¥n h·ªçc:** {subject}")
                    summary_parts.append(f"      - **Ti·∫øt:** {tiet_str}")
                    if gv:
                        summary_parts.append(f"      - **Gi√°o vi√™n:** {gv}")
                    if phong:
                        summary_parts.append(f"      - **Ph√≤ng:** {phong}")
    
    return "\n".join(summary_parts)

# --- Giao di·ªán ·ª©ng d·ª•ng Streamlit ---

st.set_page_config(page_title="Tr√≠ch xu·∫•t v√† Truy v·∫•n TKB", layout="wide")
st.title("üìä Tr√≠ch xu·∫•t v√† Truy v·∫•n Th·ªùi Kh√≥a Bi·ªÉu")
st.write("T·∫£i file Excel TKB, ·ª©ng d·ª•ng s·∫Ω t·ª± ƒë·ªông chuy·ªÉn ƒë·ªïi th√†nh c∆° s·ªü d·ªØ li·ªáu v√† cho ph√©p b·∫°n tra c·ª©u th√¥ng tin chi ti·∫øt.")

with st.expander("üí° H∆∞·ªõng d·∫´n c·∫•u h√¨nh ƒë·ªÉ √°nh x·∫° t√™n gi√°o vi√™n"):
    st.info("""
        ƒê·ªÉ ·ª©ng d·ª•ng c√≥ th·ªÉ t·ª± ƒë·ªông chuy·ªÉn t√™n gi√°o vi√™n vi·∫øt t·∫Øt sang t√™n ƒë·∫ßy ƒë·ªß, b·∫°n c·∫ßn:
        1.  **T·∫°o m·ªôt Service Account** tr√™n Google Cloud Platform v√† c·∫•p quy·ªÅn truy c·∫≠p Google Sheets API.
        2.  **Chia s·∫ª file Google Sheet** c√≥ m√£ `1TJfaywQM1VNGjDbWyC3osTLLOvlgzP0-bQjz8J-_BoI` v·ªõi ƒë·ªãa ch·ªâ email c·ªßa Service Account.
        3.  **Th√™m th√¥ng tin credentials** c·ªßa Service Account v√†o `secrets.toml` c·ªßa ·ª©ng d·ª•ng Streamlit theo m·∫´u.
        N·∫øu kh√¥ng c√≥ c·∫•u h√¨nh n√†y, t√™n gi√°o vi√™n s·∫Ω ƒë∆∞·ª£c gi·ªØ nguy√™n ·ªü d·∫°ng vi·∫øt t·∫Øt.
    """)

# --- K·∫æT N·ªêI V√Ä L·∫§Y D·ªÆ LI·ªÜU √ÅNH X·∫† ---
TEACHER_INFO_SHEET_ID = "1TJfaywQM1VNGjDbWyC3osTLLOvlgzP0-bQjz8J-_BoI"
teacher_mapping_data = {}
if "gcp_service_account" in st.secrets:
    gsheet_client = connect_to_gsheet()
    teacher_mapping_data = get_teacher_mapping(gsheet_client, TEACHER_INFO_SHEET_ID)
else:
    st.warning("Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh Google Sheets trong `st.secrets`. T√™n gi√°o vi√™n s·∫Ω kh√¥ng ƒë∆∞·ª£c √°nh x·∫°.", icon="‚ö†Ô∏è")


uploaded_file = st.file_uploader("Ch·ªçn file Excel c·ªßa b·∫°n", type=["xlsx"])

if uploaded_file is not None:
    try:
        file_bytes = io.BytesIO(uploaded_file.getvalue())
        workbook = openpyxl.load_workbook(file_bytes, data_only=True)
        sheet = workbook.active

        st.success(f"ƒê√£ ƒë·ªçc th√†nh c√¥ng file: **{uploaded_file.name}**")
        
        with st.spinner("ƒêang t√¨m v√† x·ª≠ l√Ω d·ªØ li·ªáu..."):
            raw_df = extract_schedule_from_excel(sheet)

        if raw_df is not None:
            db_df = transform_to_database_format(raw_df, teacher_mapping_data)

            if db_df is not None:
                st.markdown("---")
                st.header("üîç Tra c·ª©u Th·ªùi Kh√≥a Bi·ªÉu")
                
                class_list = sorted(db_df['L·ªõp'].unique())
                selected_class = st.selectbox("Ch·ªçn l·ªõp ƒë·ªÉ xem chi ti·∫øt:", options=class_list)

                if selected_class:
                    class_schedule = db_df[db_df['L·ªõp'] == selected_class]
                    
                    summary_text = generate_schedule_summary(class_schedule)
                    st.markdown(summary_text)

                    st.write("#### B·∫£ng d·ªØ li·ªáu chi ti·∫øt:")
                    class_schedule_sorted = class_schedule.sort_values(by=['Th·ª©', 'Bu·ªïi', 'Ti·∫øt'])
                    display_columns = [
                        'Th·ª©', 'Bu·ªïi', 'Ti·∫øt', 'M√¥n h·ªçc', 'Ph√≤ng h·ªçc', 'Gi√°o vi√™n BM', 
                        'Sƒ© s·ªë', 'Tr√¨nh ƒë·ªô', 'Ph√≤ng SHCN', 'Gi√°o vi√™n CN', 'L·ªõp VHPT'
                    ]
                    
                    st.dataframe(
                        class_schedule_sorted[display_columns],
                        use_container_width=True,
                        hide_index=True
                    )
                
                with st.expander("Xem to√†n b·ªô d·ªØ li·ªáu d·∫°ng C∆° s·ªü d·ªØ li·ªáu"):
                    st.dataframe(db_df, use_container_width=True, hide_index=True)
            
            with st.expander("Xem d·ªØ li·ªáu g·ªëc (ƒë√£ x·ª≠ l√Ω √¥ g·ªôp v√† ti√™u ƒë·ªÅ)"):
                st.dataframe(raw_df)
        else:
            st.warning("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë·ªãnh d·∫°ng file c·ªßa b·∫°n.")

    except Exception as e:
        st.error(f"ƒê√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω file: {e}")
