# Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
import streamlit as st
import pandas as pd
import io

# --- Giao di·ªán ·ª©ng d·ª•ng Streamlit ---

# ƒê·∫∑t ti√™u ƒë·ªÅ cho ·ª©ng d·ª•ng
st.set_page_config(page_title="Tr√≠ch xu·∫•t Th·ªùi Kh√≥a Bi·ªÉu", layout="wide")
st.title("üì§ Tr√≠ch xu·∫•t Th·ªùi Kh√≥a Bi·ªÉu L·ªõp H·ªçc")
st.write("T·∫£i file c·ªßa b·∫°n l√™n, ·ª©ng d·ª•ng s·∫Ω t·ª± ƒë·ªông l·∫•y d·ªØ li·ªáu t·ª´ **d√≤ng th·ª© 3** ƒë·ªÉ t·∫°o danh s√°ch l·ªõp. Sau khi ch·ªçn l·ªõp, th·ªùi kh√≥a bi·ªÉu s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã theo ƒë√∫ng m·∫´u.")

# T·∫°o m·ªôt c·ªôt ƒë·ªÉ ng∆∞·ªùi d√πng t·∫£i file l√™n
uploaded_file = st.file_uploader("Ch·ªçn file Excel ho·∫∑c CSV c·ªßa b·∫°n", type=["xlsx", "csv"])

# Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ t·∫£i file l√™n ch∆∞a
if uploaded_file is not None:
    try:
        # L·∫•y t√™n file v√† ph·∫ßn m·ªü r·ªông
        file_name = uploaded_file.name
        
        # ƒê·ªçc file d·ª±a tr√™n ƒë·ªãnh d·∫°ng (xlsx ho·∫∑c csv)
        if file_name.endswith('.xlsx'):
            df = pd.read_excel(uploaded_file, header=None, engine='openpyxl')
        else:
            df = pd.read_csv(uploaded_file, header=None)

        # --- X·ª≠ l√Ω d·ªØ li·ªáu ---

        if len(df) >= 3:
            options_list = df.iloc[2].dropna().astype(str).tolist()

            st.success(f"ƒê√£ ƒë·ªçc th√†nh c√¥ng file: **{file_name}**")
            
            st.header("üëá 1. Vui l√≤ng ch·ªçn l·ªõp ƒë·ªÉ xem th·ªùi kh√≥a bi·ªÉu")
            selected_option = st.selectbox(
                label="Danh s√°ch c√°c l·ªõp c√≥ trong file:",
                options=options_list
            )

            # --- X·ª¨ L√ù V√Ä HI·ªÇN TH·ªä TH·ªúI KH√ìA BI·ªÇU THEO M·∫™U M·ªöI ---
            if selected_option:
                st.header(f"üóìÔ∏è 2. Th·ªùi kh√≥a bi·ªÉu c·ªßa l·ªõp: {selected_option}")

                # T√¨m v·ªã tr√≠ c·ªôt c·ªßa l·ªõp ƒë√£ ch·ªçn
                header_row_list = df.iloc[2].tolist()
                try:
                    col_idx = header_row_list.index(selected_option)
                except ValueError:
                    st.error(f"Kh√¥ng t√¨m th·∫•y l·ªõp '{selected_option}' trong d√≤ng ti√™u ƒë·ªÅ.")
                    st.stop()

                # Tr√≠ch xu·∫•t d·ªØ li·ªáu th√¥
                schedule_data = df.iloc[3:, [1, 2, col_idx]].copy()
                schedule_data.columns = ['Th·ª©', 'Ti·∫øt', 'M√¥n h·ªçc']

                # --- B∆Ø·ªöC G·ª† L·ªñI: HI·ªÇN TH·ªä D·ªÆ LI·ªÜU TH√î ---
                with st.expander("üîç Ki·ªÉm tra d·ªØ li·ªáu th√¥ ƒë∆∞·ª£c tr√≠ch xu·∫•t (tr∆∞·ªõc khi x·ª≠ l√Ω)"):
                    st.write("B·∫£ng d∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu ƒë∆∞·ª£c ƒë·ªçc tr·ª±c ti·∫øp t·ª´ c√°c c·ªôt 'Th·ª©', 'Ti·∫øt' v√† c·ªôt c·ªßa l·ªõp b·∫°n ƒë√£ ch·ªçn. **H√£y ki·ªÉm tra xem d·ªØ li·ªáu ·ªü ƒë√¢y c√≥ kh·ªõp v·ªõi file Excel c·ªßa b·∫°n kh√¥ng.** N·∫øu d·ªØ li·ªáu ·ªü ƒë√¢y b·ªã sai, nghƒ©a l√† ch∆∞∆°ng tr√¨nh ƒë√£ ƒë·ªçc file kh√¥ng ch√≠nh x√°c.")
                    st.dataframe(schedule_data)


                # --- L√ÄM S·∫†CH V√Ä M·ªû R·ªòNG D·ªÆ LI·ªÜU (LOGIC M·ªöI) ---
                schedule_data['Th·ª©'] = schedule_data['Th·ª©'].ffill()
                schedule_data.dropna(subset=['Th·ª©', 'M√¥n h·ªçc'], inplace=True)
                schedule_data['M√¥n h·ªçc'] = schedule_data['M√¥n h·ªçc'].astype(str)

                expanded_rows = []
                for _, row in schedule_data.iterrows():
                    thu = row['Th·ª©']
                    mon_hoc = row['M√¥n h·ªçc']
                    tiet_val = str(row['Ti·∫øt']).strip()

                    if not mon_hoc.strip():
                        continue

                    try:
                        if '-' in tiet_val:
                            parts = tiet_val.split('-')
                            start_tiet = int(float(parts[0]))
                            end_tiet = int(float(parts[1]))
                            for tiet in range(start_tiet, end_tiet + 1):
                                expanded_rows.append({'Th·ª©': thu, 'Ti·∫øt': tiet, 'M√¥n h·ªçc': mon_hoc})
                        else:
                            tiet = int(float(tiet_val))
                            expanded_rows.append({'Th·ª©': thu, 'Ti·∫øt': tiet, 'M√¥n h·ªçc': mon_hoc})
                    except (ValueError, TypeError):
                        continue
                
                expanded_schedule = pd.DataFrame(expanded_rows)

                if expanded_schedule.empty:
                    st.warning("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu th·ªùi kh√≥a bi·ªÉu h·ª£p l·ªá cho l·ªõp ƒë√£ ch·ªçn sau khi x·ª≠ l√Ω. Vui l√≤ng ki·ªÉm tra d·ªØ li·ªáu th√¥ ·ªü tr√™n.")
                    st.stop()

                # --- T√°i c·∫•u tr√∫c DataFrame ---
                tkb_pivot = pd.pivot_table(
                    expanded_schedule, 
                    index='Ti·∫øt', 
                    columns='Th·ª©', 
                    values='M√¥n h·ªçc',
                    aggfunc=lambda x: ' / '.join(x)
                )
                
                tkb_final = tkb_pivot.reset_index()

                all_days = ['Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7']
                for day in all_days:
                    if day not in tkb_final.columns:
                        tkb_final[day] = ''
                
                tkb_final = tkb_final.fillna('')

                # --- T·∫†O B·∫¢NG THEO ƒê√öNG M·∫™U ---
                
                tkb_sang = tkb_final[tkb_final['Ti·∫øt'] <= 5].copy()
                tkb_chieu = tkb_final[tkb_final['Ti·∫øt'] >= 6].copy()

                if not tkb_chieu.empty:
                    tkb_chieu['Ti·∫øt'] = tkb_chieu['Ti·∫øt'] - 5

                tkb_sang.insert(0, 'Bu·ªïi', 'S√°ng')
                tkb_chieu.insert(0, 'Bu·ªïi', 'Chi·ªÅu')
                
                tkb_display = pd.concat([tkb_sang, tkb_chieu], ignore_index=True)
                
                final_columns_order = ['Bu·ªïi', 'Ti·∫øt'] + all_days
                tkb_display = tkb_display[final_columns_order]

                # --- LOGIC M·ªöI: T·∫†O HI·ªÜU ·ª®NG G·ªòP √î ---
                tkb_styled = tkb_display.copy()
                
                columns_to_merge = ['Bu·ªïi'] + all_days
                
                for col in columns_to_merge:
                    mask = (tkb_styled[col] == tkb_styled[col].shift(1)) & (tkb_styled[col] != '')
                    tkb_styled.loc[mask, col] = ''

                # --- Hi·ªÉn th·ªã Th·ªùi Kh√≥a Bi·ªÉu ---
                st.write("#### üìÖ Th·ªùi Kh√≥a Bi·ªÉu Chi Ti·∫øt")
                # THAY ƒê·ªîI: S·ª≠ d·ª•ng st.table ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng tƒ©nh
                st.table(tkb_styled)

            # Hi·ªÉn th·ªã file g·ªëc
            with st.expander("Xem to√†n b·ªô n·ªôi dung file g·ªëc ƒë√£ t·∫£i l√™n"):
                st.dataframe(df)
        else:
            st.warning("File b·∫°n t·∫£i l√™n kh√¥ng c√≥ ƒë·ªß 3 d√≤ng. Vui l√≤ng ki·ªÉm tra l·∫°i file.")
            st.dataframe(df)

    except Exception as e:
        st.error(f"ƒê√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω file: {e}")
