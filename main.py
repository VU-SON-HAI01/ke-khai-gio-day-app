import streamlit as st
import os
import toml
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# --- H√ÄM CHUY·ªÇN ƒê·ªîI BYTE SANG ƒê∆†N V·ªä D·ªÑ ƒê·ªåC ---
def bytes_to_human_readable(byte_count):
    """Chuy·ªÉn ƒë·ªïi byte sang KB, MB, GB, TB."""
    if byte_count is None:
        return "N/A"
    power = 1024
    n = 0
    power_labels = {0: 'B', 1: 'KB', 2: 'MB', 3: 'GB', 4: 'TB'}
    while byte_count >= power and n < len(power_labels) -1:
        byte_count /= power
        n += 1
    return f"{byte_count:.2f} {power_labels[n]}"

# --- H√ÄM L·∫§Y TH√îNG TIN DUNG L∆Ø·ª¢NG ---
@st.cache_data(ttl=300) # Cache k·∫øt qu·∫£ trong 5 ph√∫t
def get_storage_info():
    """
    K·∫øt n·ªëi t·ªõi Google Drive API v√† tr·∫£ v·ªÅ m·ªôt dictionary ch·ª©a th√¥ng tin dung l∆∞·ª£ng.
    """
    try:
        secrets_path = os.path.join(".streamlit", "secrets.toml")
        if not os.path.exists(secrets_path):
            return {"error": f"Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh t·∫°i '{secrets_path}'"}

        secrets = toml.load(secrets_path)
        creds_dict = secrets.get("gcp_service_account")
        if not creds_dict:
            return {"error": "Kh√¥ng t√¨m th·∫•y th√¥ng tin 'gcp_service_account' trong file secrets.toml"}

        client_email = creds_dict.get("client_email")
        scopes = ["https://www.googleapis.com/auth/drive.readonly"]
        creds = Credentials.from_service_account_info(creds_dict, scopes=scopes)
        drive_service = build('drive', 'v3', credentials=creds)

        about = drive_service.about().get(fields='storageQuota').execute()
        storage_quota = about.get('storageQuota', {})

        limit = int(storage_quota.get('limit', 0))
        usage = int(storage_quota.get('usage', 0))
        
        return {
            "client_email": client_email,
            "limit": limit,
            "usage": usage,
            "usageInDrive": int(storage_quota.get('usageInDrive', 0)),
            "usageInDriveTrash": int(storage_quota.get('usageInDriveTrash', 0)),
            "error": None
        }

    except HttpError as e:
        return {"error": f"L·ªói HTTP t·ª´ Google API: {e}"}
    except Exception as e:
        return {"error": f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}"}

# --- GIAO DI·ªÜN STREAMLIT ---
st.set_page_config(page_title="Ki·ªÉm tra dung l∆∞·ª£ng Drive", layout="centered")
st.title("üìä Tr√¨nh ki·ªÉm tra dung l∆∞·ª£ng Google Drive")
st.write("C√¥ng c·ª• n√†y gi√∫p ki·ªÉm tra dung l∆∞·ª£ng l∆∞u tr·ªØ c·ªßa Service Account ƒë∆∞·ª£c c·∫•u h√¨nh trong file `secrets.toml`.")

if st.button("üöÄ B·∫Øt ƒë·∫ßu ki·ªÉm tra ngay"):
    with st.spinner("ƒêang k·∫øt n·ªëi v√† l·∫•y th√¥ng tin..."):
        data = get_storage_info()

    if data.get("error"):
        st.error(f"**ƒê√£ x·∫£y ra l·ªói:**\n{data['error']}")
    else:
        st.success(f"ƒê√£ l·∫•y th√¥ng tin th√†nh c√¥ng cho **{data['client_email']}**")
        
        limit = data['limit']
        usage = data['usage']
        
        # Hi·ªÉn th·ªã c√°c √¥ s·ªë li·ªáu
        col1, col2 = st.columns(2)
        col1.metric("T·ªïng dung l∆∞·ª£ng (Limit)", bytes_to_human_readable(limit))
        col2.metric("ƒê√£ s·ª≠ d·ª•ng (Usage)", bytes_to_human_readable(usage), delta_color="inverse")

        # Thanh ti·∫øn tr√¨nh
        if limit > 0:
            percent_used = (usage / limit) * 100
            st.progress(percent_used / 100)
            st.write(f"ƒê√£ s·ª≠ d·ª•ng **{percent_used:.2f}%** dung l∆∞·ª£ng.")
            
            if percent_used > 95:
                st.warning("‚ö†Ô∏è **C·∫¢NH B√ÅO:** Dung l∆∞·ª£ng s·∫Øp h·∫øt! Vui l√≤ng d·ªçn d·∫πp Drive.")
        else:
            st.info("Kh√¥ng c√≥ th√¥ng tin v·ªÅ gi·ªõi h·∫°n dung l∆∞·ª£ng.")

        # Hi·ªÉn th·ªã chi ti·∫øt
        with st.expander("Xem chi ti·∫øt s·ª≠ d·ª•ng"):
            st.write(f"- **Trong Drive:** `{bytes_to_human_readable(data['usageInDrive'])}`")
            st.write(f"- **Trong Th√πng r√°c:** `{bytes_to_human_readable(data['usageInDriveTrash'])}`")
            st.caption("L∆∞u √Ω: C√°c t·ªáp trong Th√πng r√°c v·∫´n chi·∫øm dung l∆∞·ª£ng l∆∞u tr·ªØ.")
