import streamlit as st
import gspread
import pandas as pd
from streamlit_oauth import OAuth2Component
import requests
from google.oauth2.service_account import Credentials as ServiceAccountCredentials
from google.oauth2.credentials import Credentials as UserCredentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
import os

# --- C·∫§U H√åNH BAN ƒê·∫¶U ---
st.set_page_config(layout="wide", page_title="H·ªá th·ªëng K√™ khai Gi·ªù gi·∫£ng")
st.image("image/banner-top-kegio.jpg", use_container_width=True)

# --- T·∫¢I C·∫§U H√åNH T·ª™ STREAMLIT SECRETS ---
try:
    CLIENT_ID = st.secrets["google_oauth"]["clientId"]
    CLIENT_SECRET = st.secrets["google_oauth"]["clientSecret"]
    REDIRECT_URI = st.secrets["google_oauth"]["redirectUri"]

    ADMIN_SHEET_NAME = st.secrets["google_sheet"]["sheet_name"]
    USER_MAPPING_WORKSHEET = st.secrets["google_sheet"]["user_mapping_worksheet"]
    TARGET_FOLDER_NAME = st.secrets["google_sheet"]["target_folder_name"]
    TEMPLATE_FILE_ID = st.secrets["google_sheet"]["template_file_id"]

    ADMIN_EMAIL = "vshai48kd1@gmail.com"
    CLIENT_EMAIL = st.secrets["gcp_service_account"]["client_email"]

except KeyError as e:
    st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y th√¥ng tin c·∫•u h√¨nh '{e.args[0]}' trong st.secrets.")
    st.stop()

# --- URLS V√Ä SCOPES CHO OAUTH2 ---
AUTHORIZE_URL = "https://accounts.google.com/o/oauth2/v2/auth"
TOKEN_URL = "https://oauth2.googleapis.com/token"
REVOKE_URL = "https://oauth2.googleapis.com/revoke"
# Y√™u c·∫ßu quy·ªÅn truy c·∫≠p Drive ƒë·ªÉ Admin c√≥ th·ªÉ t·∫°o file
SCOPES = ["openid", "email", "profile", "https://www.googleapis.com/auth/drive"]

# --- C√ÅC H√ÄM K·∫æT N·ªêI V√Ä X·ª¨ L√ù API ---

@st.cache_resource
def connect_as_service_account():
    """K·∫øt n·ªëi b·∫±ng Service Account, ch·ªâ d√πng ƒë·ªÉ ƒë·ªçc/ghi sheet admin."""
    try:
        creds_dict = st.secrets["gcp_service_account"]
        scopes = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive.readonly"]
        creds = ServiceAccountCredentials.from_service_account_info(creds_dict, scopes=scopes)
        return gspread.authorize(creds)
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi v·ªõi t∆∞ c√°ch Service Account: {e}")
        return None

@st.cache_resource
def connect_as_user(_token):
    """T·∫°o c√°c client API (gspread, drive) t·ª´ token c·ªßa ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p."""
    try:
        creds = UserCredentials(
            token=_token['access_token'], refresh_token=_token.get('refresh_token'),
            token_uri=TOKEN_URL, client_id=CLIENT_ID, client_secret=CLIENT_SECRET, scopes=SCOPES
        )
        gspread_client = gspread.authorize(creds)
        drive_service = build('drive', 'v3', credentials=creds)
        return gspread_client, drive_service
    except Exception as e:
        st.error(f"L·ªói x√°c th·ª±c v·ªõi t√†i kho·∫£n ng∆∞·ªùi d√πng: {e}. Token c√≥ th·ªÉ ƒë√£ h·∫øt h·∫°n.")
        st.session_state.token = None
        st.rerun()
        return None, None

def provision_new_user(admin_drive_service, sa_gspread_client, folder_id, new_magv, new_email):
    """
    H√†m d√†nh cho Admin: D√πng quy·ªÅn c·ªßa Admin ƒë·ªÉ t·∫°o file, d√πng SA ƒë·ªÉ c·∫≠p nh·∫≠t b·∫£ng map.
    """
    messages = []
    new_magv_str = str(new_magv)
    try:
        # --- B∆Ø·ªöC 1: D√πng quy·ªÅn c·ªßa ADMIN ƒë·ªÉ t·∫°o file ---
        query = f"name='{new_magv_str}' and mimeType='application/vnd.google-apps.spreadsheet' and '{folder_id}' in parents and trashed=false"
        response = admin_drive_service.files().list(q=query, fields='files(id)').execute()
        files = response.get('files', [])

        if not files:
            copied_file_metadata = {'name': new_magv_str, 'parents': [folder_id]}
            copied_file = admin_drive_service.files().copy(fileId=TEMPLATE_FILE_ID, body=copied_file_metadata).execute()
            copied_file_id = copied_file.get('id')
            admin_drive_service.permissions().create(
                fileId=copied_file_id,
                body={'type': 'user', 'role': 'writer', 'emailAddress': new_email},
                sendNotificationEmail=True
            ).execute()
            messages.append(f"‚úÖ ƒê√£ t·∫°o file '{new_magv_str}' v√† chia s·∫ª cho {new_email}.")
        else:
            messages.append(f"‚ÑπÔ∏è File '{new_magv_str}' ƒë√£ t·ªìn t·∫°i trong Google Drive.")

        # --- B∆Ø·ªöC 2: D√πng Service Account ƒë·ªÉ c·∫≠p nh·∫≠t b·∫£ng ph√¢n quy·ªÅn ---
        mapping_sheet = sa_gspread_client.open(ADMIN_SHEET_NAME).worksheet(USER_MAPPING_WORKSHEET)
        records = mapping_sheet.get_all_records()
        df = pd.DataFrame(records)
        email_exists = not df.empty and new_email in df['email'].values
        magv_exists = not df.empty and new_magv_str in df['magv'].astype(str).values

        if not email_exists and not magv_exists:
            mapping_sheet.append_row([new_email, new_magv_str])
            messages.append(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t b·∫£ng ph√¢n quy·ªÅn cho: {new_email} -> {new_magv_str}.")
        else:
            messages.append(f"‚ÑπÔ∏è Th√¥ng tin ƒë√£ c√≥ trong b·∫£ng ph√¢n quy·ªÅn.")

        return messages
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh c·∫•p quy·ªÅn: {e}")
        return []

def get_user_spreadsheet(sa_gspread_client, email):
    """T√¨m magv v√† m·ªü file sheet t∆∞∆°ng ·ª©ng cho ng∆∞·ªùi d√πng."""
    try:
        mapping_sheet = sa_gspread_client.open(ADMIN_SHEET_NAME).worksheet(USER_MAPPING_WORKSHEET)
        df = pd.DataFrame(mapping_sheet.get_all_records())
        user_row = df[df['email'] == email]
        if user_row.empty:
            return None, None
        magv = str(user_row.iloc[0]['magv'])
        spreadsheet = sa_gspread_client.open(magv)
        return magv, spreadsheet
    except gspread.exceptions.SpreadsheetNotFound:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y file Google Sheet c√≥ t√™n '{magv}'. Vui l√≤ng li√™n h·ªá Admin.")
        return None, None
    except Exception as e:
        st.error(f"L·ªói khi truy c·∫≠p file l√†m vi·ªác: {e}")
        return None, None

# --- GIAO DI·ªÜN V√Ä LU·ªíNG ·ª®NG D·ª§NG CH√çNH ---
oauth2 = OAuth2Component(CLIENT_ID, CLIENT_SECRET, AUTHORIZE_URL, TOKEN_URL, TOKEN_URL, REVOKE_URL)

if 'token' not in st.session_state:
    st.session_state.token = None

if st.session_state.token is None:
    st.info("Vui l√≤ng ƒëƒÉng nh·∫≠p b·∫±ng t√†i kho·∫£n Google.")
    result = oauth2.authorize_button(
        name="ƒêƒÉng nh·∫≠p v·ªõi Google", icon="https://www.google.com.tw/favicon.ico",
        redirect_uri=REDIRECT_URI, scope=" ".join(SCOPES), key="google_login", use_container_width=True
    )
    if result and 'token' in result:
        st.session_state.token = result['token']
        try:
            user_response = requests.get("https://www.googleapis.com/oauth2/v1/userinfo", headers={"Authorization": f"Bearer {result['token']['access_token']}"})
            user_response.raise_for_status()
            st.session_state.user_info = user_response.json()
            st.rerun()
        except requests.exceptions.RequestException as e:
            st.error(f"L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng: {e}"); st.session_state.token = None
else:
    user_info = st.session_state.user_info
    user_email = user_info.get('email')

    with st.sidebar:
        st.write(f"ƒê√£ ƒëƒÉng nh·∫≠p v·ªõi:")
        st.success(user_email)
        if st.button("ƒêƒÉng xu·∫•t", use_container_width=True):
            st.session_state.token = None
            st.session_state.user_info = None
            st.rerun()

    st.header(f"Ch√†o m·ª´ng, {user_info.get('name', '')}!")

    # --- PH√ÇN LU·ªíNG ADMIN / USER ---
    if user_email == ADMIN_EMAIL:
        st.subheader("üë®‚Äçüíª B·∫£ng ƒëi·ªÅu khi·ªÉn c·ªßa Admin")
        st.info("T·∫°o file Sheet v√† c·∫•p quy·ªÅn cho gi√°o vi√™n m·ªõi.")

        # K·∫øt n·ªëi v·ªõi c·∫£ 2 quy·ªÅn: c·ªßa Admin v√† c·ªßa Service Account
        sa_gspread_client = connect_as_service_account()
        admin_gspread_client, admin_drive_service = connect_as_user(st.session_state.token)

        if not sa_gspread_client or not admin_drive_service:
            st.error("L·ªói k·∫øt n·ªëi t·ªõi Google API. Vui l√≤ng th·ª≠ l·∫°i.")
            st.stop()

        # Admin d√πng quy·ªÅn c·ªßa m√¨nh ƒë·ªÉ t√¨m folder
        query = f"mimeType='application/vnd.google-apps.folder' and name='{TARGET_FOLDER_NAME}' and 'me' in owners"
        response = admin_drive_service.files().list(q=query, fields='files(id)').execute()
        folders = response.get('files', [])
        
        if not folders:
            st.error(f"L·ªói: Admin ({ADMIN_EMAIL}) kh√¥ng s·ªü h·ªØu th∆∞ m·ª•c n√†o c√≥ t√™n '{TARGET_FOLDER_NAME}'.")
            st.stop()
        
        folder_id = folders[0].get('id')

        with st.form("provision_form", border=True):
            st.write("**T·∫°o ho·∫∑c ki·ªÉm tra ng∆∞·ªùi d√πng**")
            new_magv = st.text_input("Nh·∫≠p M√£ gi√°o vi√™n (t√™n file)", placeholder="V√≠ d·ª•: 1001")
            new_email = st.text_input("Nh·∫≠p email c·ªßa gi√°o vi√™n", placeholder="V√≠ d·ª•: teacher@example.com")
            submitted = st.form_submit_button("Th·ª±c hi·ªán")

            if submitted:
                if not new_magv or not new_email:
                    st.warning("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin.")
                else:
                    with st.spinner("ƒêang ki·ªÉm tra v√† th·ª±c hi·ªán..."):
                        messages = provision_new_user(admin_drive_service, sa_gspread_client, folder_id, new_magv, new_email)
                    if messages:
                        st.success("Ho√†n t·∫•t!")
                        for msg in messages:
                            st.info(msg)
                    else:
                        st.error("Qu√° tr√¨nh c√≥ l·ªói, vui l√≤ng ki·ªÉm tra th√¥ng b√°o.")

    else:
        # GIAO DI·ªÜN C·ª¶A USER TH∆Ø·ªúNG
        sa_gspread_client = connect_as_service_account()
        if not sa_gspread_client:
            st.stop()

        with st.spinner("ƒêang ki·ªÉm tra quy·ªÅn v√† t·∫£i d·ªØ li·ªáu..."):
            magv, spreadsheet = get_user_spreadsheet(sa_gspread_client, user_email)

        if magv and spreadsheet:
            st.success(f"X√°c th·ª±c th√†nh c√¥ng! ƒêang l√†m vi·ªác v·ªõi file: {magv}")
            st.info("Giao di·ªán l√†m vi·ªác c·ªßa gi√°o vi√™n s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã ·ªü ƒë√¢y.")
        else:
            st.error("T√†i kho·∫£n c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω trong h·ªá th·ªëng.")
            st.warning(f"Vui l√≤ng li√™n h·ªá Admin ({ADMIN_EMAIL}) ƒë·ªÉ ƒë∆∞·ª£c c·∫•p quy·ªÅn.")
