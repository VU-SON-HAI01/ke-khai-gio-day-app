import streamlit as st
import gspread
import pandas as pd
from streamlit_oauth import OAuth2Component
import requests
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
import os

# --- C·∫§U H√åNH BAN ƒê·∫¶U ---
st.set_page_config(layout="wide", page_title="H·ªá th·ªëng K√™ khai Gi·ªù gi·∫£ng")
st.image("image/banner-top-kegio.jpg", use_container_width=True)

# --- T·∫¢I C·∫§U H√åNH T·ª™ STREAMLIT SECRETS ---
try:
    # C·∫•u h√¨nh OAuth cho vi·ªác ƒëƒÉng nh·∫≠p c·ªßa ng∆∞·ªùi d√πng
    CLIENT_ID = st.secrets["google_oauth"]["clientId"]
    CLIENT_SECRET = st.secrets["google_oauth"]["clientSecret"]
    REDIRECT_URI = st.secrets["google_oauth"]["redirectUri"]

    # C·∫•u h√¨nh Google Sheet
    ADMIN_SHEET_NAME = st.secrets["google_sheet"]["sheet_name"] # File ch·ª©a b·∫£ng map email -> magv
    USER_MAPPING_WORKSHEET = st.secrets["google_sheet"]["user_mapping_worksheet"] # T√™n worksheet trong file tr√™n
    TARGET_FOLDER_NAME = st.secrets["google_sheet"]["target_folder_name"] # Th∆∞ m·ª•c ch·ª©a file c·ªßa c√°c GV
    TEMPLATE_FILE_ID = st.secrets["google_sheet"]["template_file_id"] # File m·∫´u ƒë·ªÉ copy

    # Email c·ªßa Admin - ng∆∞·ªùi c√≥ quy·ªÅn t·∫°o ng∆∞·ªùi d√πng m·ªõi
    ADMIN_EMAIL = "vshai48kd1@gmail.com"
    CLIENT_EMAIL = st.secrets["gcp_service_account"]["client_email"] # Email c·ªßa Service Account

except KeyError as e:
    st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y th√¥ng tin c·∫•u h√¨nh '{e.args[0]}' trong st.secrets.")
    st.stop()

# --- URLS V√Ä SCOPES CHO OAUTH2 ---
AUTHORIZE_URL = "https://accounts.google.com/o/oauth2/v2/auth"
TOKEN_URL = "https://oauth2.googleapis.com/token"
REVOKE_URL = "https://oauth2.googleapis.com/revoke"
SCOPES = ["openid", "email", "profile"] # Ch·ªâ c·∫ßn quy·ªÅn x√°c th·ª±c, kh√¥ng c·∫ßn truy c·∫≠p Drive c·ªßa user

# --- C√ÅC H√ÄM K·∫æT N·ªêI V√Ä X·ª¨ L√ù API (D√πng Service Account cho m·ªçi th·ª©) ---

@st.cache_resource
def connect_to_google_apis():
    """H√†m k·∫øt n·ªëi duy nh·∫•t, s·ª≠ d·ª•ng Service Account cho c·∫£ Drive v√† Sheets."""
    try:
        creds_dict = st.secrets["gcp_service_account"]
        scopes = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
        creds = Credentials.from_service_account_info(creds_dict, scopes=scopes)
        gspread_client = gspread.authorize(creds)
        drive_service = build('drive', 'v3', credentials=creds)
        return gspread_client, drive_service
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi t·ªõi Google APIs b·∫±ng Service Account: {e}")
        return None, None

def get_folder_id(drive_service, folder_name):
    """T√¨m ID c·ªßa th∆∞ m·ª•c ƒë√£ ƒë∆∞·ª£c chia s·∫ª v·ªõi Service Account."""
    try:
        query = f"mimeType='application/vnd.google-apps.folder' and name='{folder_name}' and trashed=false"
        response = drive_service.files().list(q=query, fields='files(id)').execute()
        folders = response.get('files', [])
        if folders:
            return folders[0].get('id')
        else:
            st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c '{folder_name}'.")
            st.warning(f"Admin, h√£y ƒë·∫£m b·∫£o b·∫°n ƒë√£ chia s·∫ª th∆∞ m·ª•c '{folder_name}' v·ªõi email: **{CLIENT_EMAIL}** v√† c·∫•p quy·ªÅn **'Ng∆∞·ªùi ch·ªânh s·ª≠a' (Editor)**.")
            return None
    except Exception as e:
        st.error(f"L·ªói khi t√¨m ki·∫øm th∆∞ m·ª•c '{folder_name}': {e}")
        return None

def provision_new_user(gspread_client, drive_service, folder_id, new_magv, new_email):
    """H√†m d√†nh cho Admin: T·∫°o sheet m·ªõi, chia s·∫ª v√† c·∫≠p nh·∫≠t b·∫£ng map."""
    try:
        # 1. Ki·ªÉm tra xem magv ho·∫∑c email ƒë√£ t·ªìn t·∫°i ch∆∞a
        mapping_sheet = gspread_client.open(ADMIN_SHEET_NAME).worksheet(USER_MAPPING_WORKSHEET)
        records = mapping_sheet.get_all_records()
        df = pd.DataFrame(records)
        if not df.empty:
            if new_magv in df['magv'].astype(str).values:
                st.error(f"M√£ gi√°o vi√™n '{new_magv}' ƒë√£ t·ªìn t·∫°i.")
                return False
            if new_email in df['email'].values:
                st.error(f"Email '{new_email}' ƒë√£ ƒë∆∞·ª£c c·∫•p quy·ªÅn.")
                return False

        # 2. T·∫°o file sheet m·ªõi b·∫±ng c√°ch copy file m·∫´u
        st.write(f"ƒêang t·∫°o file '{new_magv}'...")
        copied_file_metadata = {'name': str(new_magv), 'parents': [folder_id]}
        copied_file = drive_service.files().copy(fileId=TEMPLATE_FILE_ID, body=copied_file_metadata).execute()
        copied_file_id = copied_file.get('id')

        # 3. Chia s·∫ª file v·ª´a t·∫°o cho ng∆∞·ªùi d√πng
        st.write(f"ƒêang chia s·∫ª file cho {new_email}...")
        drive_service.permissions().create(
            fileId=copied_file_id,
            body={'type': 'user', 'role': 'writer', 'emailAddress': new_email},
            sendNotificationEmail=True # G·ª≠i email th√¥ng b√°o cho ng∆∞·ªùi d√πng
        ).execute()

        # 4. C·∫≠p nh·∫≠t v√†o b·∫£ng map
        st.write("ƒêang c·∫≠p nh·∫≠t b·∫£ng ph√¢n quy·ªÅn...")
        mapping_sheet.append_row([new_email, str(new_magv)])
        
        return True

    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh c·∫•p quy·ªÅn: {e}")
        return False

def get_user_spreadsheet(gspread_client, email):
    """T√¨m magv v√† m·ªü file sheet t∆∞∆°ng ·ª©ng cho ng∆∞·ªùi d√πng."""
    try:
        mapping_sheet = gspread_client.open(ADMIN_SHEET_NAME).worksheet(USER_MAPPING_WORKSHEET)
        records = mapping_sheet.get_all_records()
        if not records:
            return None, None
        
        df = pd.DataFrame(records)
        user_row = df[df['email'] == email]

        if user_row.empty:
            return None, None # Email kh√¥ng c√≥ trong b·∫£ng map

        magv = str(user_row.iloc[0]['magv'])
        spreadsheet = gspread_client.open(magv) # M·ªü file theo t√™n (magv)
        return magv, spreadsheet

    except gspread.exceptions.SpreadsheetNotFound:
        st.error(f"ƒê√£ t√¨m th·∫•y quy·ªÅn c·ªßa b·∫°n, nh∆∞ng kh√¥ng t√¨m th·∫•y file Google Sheet c√≥ t√™n '{magv}'. Vui l√≤ng li√™n h·ªá Admin.")
        return None, None
    except Exception as e:
        st.error(f"L·ªói khi truy c·∫≠p file l√†m vi·ªác: {e}")
        return None, None

# --- GIAO DI·ªÜN V√Ä LU·ªíNG ·ª®NG D·ª§NG CH√çNH ---
oauth2 = OAuth2Component(CLIENT_ID, CLIENT_SECRET, AUTHORIZE_URL, TOKEN_URL, TOKEN_URL, REVOKE_URL)

if 'token' not in st.session_state:
    st.session_state.token = None

if st.session_state.token is None:
    st.info("Vui l√≤ng ƒëƒÉng nh·∫≠p b·∫±ng t√†i kho·∫£n Google ƒë·ªÉ s·ª≠ d·ª•ng h·ªá th·ªëng.")
    result = oauth2.authorize_button(
        name="ƒêƒÉng nh·∫≠p v·ªõi Google", icon="https://www.google.com.tw/favicon.ico",
        redirect_uri=REDIRECT_URI, scope=" ".join(SCOPES), key="google_login", use_container_width=True
    )
    if result and 'token' in result:
        st.session_state.token = result['token']
        try:
            user_response = requests.get("https://www.googleapis.com/oauth2/v1/userinfo", headers={"Authorization": f"Bearer {result['token']['access_token']}"})
            user_response.raise_for_status()
            st.session_state.user_info = user_response.json()
            st.rerun()
        except requests.exceptions.RequestException as e:
            st.error(f"L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng: {e}"); st.session_state.token = None
else:
    # ƒê√£ ƒëƒÉng nh·∫≠p
    user_info = st.session_state.user_info
    user_email = user_info.get('email')

    with st.sidebar:
        st.write(f"ƒê√£ ƒëƒÉng nh·∫≠p v·ªõi email:")
        st.success(user_email)
        if st.button("ƒêƒÉng xu·∫•t", use_container_width=True):
            st.session_state.token = None
            st.session_state.user_info = None
            st.rerun()

    st.header(f"Ch√†o m·ª´ng, {user_info.get('name', '')}!")

    gspread_client, drive_service = connect_to_google_apis()
    if not gspread_client or not drive_service:
        st.stop()

    # --- PH√ÇN LU·ªíNG ADMIN / USER ---
    if user_email == ADMIN_EMAIL:
        # GIAO DI·ªÜN C·ª¶A ADMIN
        st.subheader("üë®‚Äçüíª B·∫£ng ƒëi·ªÅu khi·ªÉn c·ªßa Admin")
        st.info("Ch·ª©c nƒÉng n√†y d√πng ƒë·ªÉ t·∫°o file Sheet v√† c·∫•p quy·ªÅn cho gi√°o vi√™n m·ªõi.")

        folder_id = get_folder_id(drive_service, TARGET_FOLDER_NAME)
        if folder_id:
            with st.form("provision_form", border=True):
                st.write("**T·∫°o ng∆∞·ªùi d√πng m·ªõi**")
                new_magv = st.text_input("Nh·∫≠p M√£ gi√°o vi√™n (s·∫Ω l√† t√™n file Sheet)", placeholder="V√≠ d·ª•: 1001")
                new_email = st.text_input("Nh·∫≠p email c·ªßa gi√°o vi√™n", placeholder="V√≠ d·ª•: teacher@example.com")
                submitted = st.form_submit_button("T·∫°o v√† C·∫•p quy·ªÅn")

                if submitted:
                    if not new_magv or not new_email:
                        st.warning("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin.")
                    else:
                        with st.spinner("ƒêang x·ª≠ l√Ω..."):
                            success = provision_new_user(gspread_client, drive_service, folder_id, new_magv, new_email)
                        if success:
                            st.success(f"Ho√†n t·∫•t! ƒê√£ t·∫°o v√† c·∫•p quy·ªÅn cho {new_email} th√†nh c√¥ng.")
                        else:
                            st.error("Qu√° tr√¨nh th·ª±c hi·ªán c√≥ l·ªói, vui l√≤ng ki·ªÉm tra l·∫°i.")

    else:
        # GIAO DI·ªÜN C·ª¶A USER TH∆Ø·ªúNG
        with st.spinner("ƒêang ki·ªÉm tra quy·ªÅn v√† t·∫£i d·ªØ li·ªáu..."):
            magv, spreadsheet = get_user_spreadsheet(gspread_client, user_email)

        if magv and spreadsheet:
            st.success(f"X√°c th·ª±c th√†nh c√¥ng! ƒêang l√†m vi·ªác v·ªõi file: {magv}")
            #
            # T·∫†I ƒê√ÇY: B·∫†N C√ì TH·ªÇ TH√äM CODE ƒê·ªÇ HI·ªÇN TH·ªä D·ªÆ LI·ªÜU T·ª™ `spreadsheet`
            # V√ç D·ª§:
            # worksheet = spreadsheet.worksheet("Sheet1")
            # data = worksheet.get_all_records()
            # st.dataframe(pd.DataFrame(data))
            #
            st.info("Giao di·ªán l√†m vi·ªác c·ªßa gi√°o vi√™n s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã ·ªü ƒë√¢y.")

        else:
            st.error("T√†i kho·∫£n c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω trong h·ªá th·ªëng.")
            st.warning("Vui l√≤ng li√™n h·ªá Admin (vshai48kd1@gmail.com) ƒë·ªÉ ƒë∆∞·ª£c c·∫•p quy·ªÅn truy c·∫≠p.")
