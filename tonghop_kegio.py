import streamlit as st
import pandas as pd

# H√†m t·ªïng h·ª£p k·∫øt qu·∫£ t·ª´ c√°c trang k√™ khai
# Gi·∫£ ƒë·ªãnh d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o session_state t·ª´ c√°c trang k√™ khai

def tonghop_ketqua():
    st.title("B√°o c√°o t·ªïng h·ª£p d∆∞ gi·ªù/thi·∫øu gi·ªù")
    st.info("Trang n√†y t·ªïng h·ª£p d·ªØ li·ªáu t·ª´ c√°c trang k√™ khai v√† cho ph√©p xu·∫•t ra PDF.")

    # N√∫t t·∫£i d·ªØ li·ªáu t·ª´ Google Sheet c·ªßa user (c√°c sheet c√≥ t√™n b·∫Øt ƒë·∫ßu b·∫±ng 'output_')
    import fun_to_excel
    if 'export_ready' not in st.session_state:
        st.session_state['export_ready'] = False
    dfs = []
    col1, col2, col3 = st.columns(3)
    with col1:
        load_clicked = st.button("Xem k·∫øt qu·∫£ d∆∞ gi·ªù", use_container_width=True)
    with col2:
        export_ready = st.session_state.get('export_ready', use_container_width=True)
        excel_btn_placeholder = st.empty()
    with col3:
        export_ready = st.session_state.get('export_ready', use_container_width=True)
        pdf_btn_placeholder = st.empty()

    if load_clicked:
        spreadsheet = st.session_state.get('spreadsheet')
        if spreadsheet is None:
            st.error("Kh√¥ng t√¨m th·∫•y file Google Sheet c·ªßa b·∫°n trong session_state. H√£y ƒëƒÉng nh·∫≠p l·∫°i ho·∫∑c li√™n h·ªá Admin.")
            return
        try:
            sheet_list = spreadsheet.worksheets()
            # ƒê·ªãnh nghƒ©a th·ª© t·ª± v√† t√™n hi·ªÉn th·ªã
            sheet_order = [
                ("output_giangday", "‚úçÔ∏è B·∫£ng t·ªïng h·ª£p kh·ªëi l∆∞·ª£ng d·∫°y"),
                ("output_thiketthuc", "üìù B·∫£ng t·ªïng h·ª£p kh·ªëi thi k·∫øt th√∫c"),
                ("output_quydoigiam", "‚öñÔ∏è B·∫£ng t·ªïng h·ª£p Gi·∫£m tr·ª´/Ki√™m nhi·ªám"),
                ("output_hoatdong", "üèÉ B·∫£ng t·ªïng h·ª£p K√™ Ho·∫°t ƒë·ªông quy ƒë·ªïi kh√°c")
            ]
            found_any = False
            for idx, (sheet_name, display_name) in enumerate(sheet_order):
                ws = next((ws for ws in sheet_list if ws.title == sheet_name), None)
                if ws is not None:
                    df_raw = ws.get_all_records()
                    df = pd.DataFrame(df_raw)
                    if not df.empty:
                        # Ch·ªâ ·∫©n b·∫£ng output_giangday, c√°c b·∫£ng kh√°c v·∫´n hi·ªÉn th·ªã
                        if sheet_name != "output_giangday":
                            st.subheader(display_name)
                            # ·∫®n c√°c c·ªôt theo y√™u c·∫ßu t·ª´ng b·∫£ng
                            df_display = df.copy()
                            if sheet_name == "output_thiketthuc":
                                for col in ["M√£ Hƒê", "M√£ NCKH"]:
                                    if col in df_display.columns:
                                        df_display = df_display.drop(columns=[col])
                            elif sheet_name == "output_quydoigiam":
                                for col in ["M√£ Hƒê", "M√£ NCKH", "activity_index"]:
                                    if col in df_display.columns:
                                        df_display = df_display.drop(columns=[col])
                                # Th√™m d√≤ng T·ªïng c·ªông v√†o cu·ªëi b·∫£ng
                                if "Gi·ªù quy ƒë·ªïi" in df_display.columns:
                                    tongcong = df_display["Gi·ªù quy ƒë·ªïi"].apply(pd.to_numeric, errors='coerce').sum()
                                    total_row = {col: '' for col in df_display.columns}
                                    if "N·ªôi dung ho·∫°t ƒë·ªông" in df_display.columns:
                                        total_row["N·ªôi dung ho·∫°t ƒë·ªông"] = "T·ªïng c·ªông"
                                    total_row["Gi·ªù quy ƒë·ªïi"] = tongcong
                                    df_display = pd.concat([df_display, pd.DataFrame([total_row])], ignore_index=True)
                            elif sheet_name == "output_hoatdong":
                                # ·∫®n c·∫£ "M√£ NCKH" v√† "M√É NCKH" n·∫øu c√≥
                                for col in ["M√£ Hƒê", "M√£ NCKH", "M√É NCKH", "activity_index"]:
                                    if col in df_display.columns:
                                        df_display = df_display.drop(columns=[col])
                                # Th√™m d√≤ng T·ªïng c·ªông v√†o cu·ªëi b·∫£ng
                                if "Gi·ªù quy ƒë·ªïi" in df_display.columns:
                                    tongcong = df_display["Gi·ªù quy ƒë·ªïi"].apply(pd.to_numeric, errors='coerce').sum()
                                    total_row = {col: '' for col in df_display.columns}
                                    if "Ho·∫°t ƒë·ªông quy ƒë·ªïi" in df_display.columns:
                                        total_row["Ho·∫°t ƒë·ªông quy ƒë·ªïi"] = "T·ªïng c·ªông"
                                    total_row["Gi·ªù quy ƒë·ªïi"] = tongcong
                                    df_display = pd.concat([df_display, pd.DataFrame([total_row])], ignore_index=True)
                            st.dataframe(df_display)
                        # N·∫øu l√† b·∫£ng gi·∫£ng d·∫°y, ch·ªâ t·∫°o b·∫£ng t·ªïng h·ª£p HK1/HK2 m√† kh√¥ng hi·ªÉn th·ªã b·∫£ng g·ªëc
                        if sheet_name == "output_giangday":
                            import numpy as np
                            df_gd = df.copy()
                            input_gd = None
                            try:
                                input_gd_ws = next((ws for ws in sheet_list if ws.title == 'input_giangday'), None)
                                if input_gd_ws is not None:
                                    input_gd = pd.DataFrame(input_gd_ws.get_all_records())
                            except Exception:
                                input_gd = None
                            if 'ID_M√îN' not in df_gd.columns:
                                st.warning('Kh√¥ng t√¨m th·∫•y c·ªôt ID_M√îN trong d·ªØ li·ªáu output_giangday.')
                            else:
                                mon_list = df_gd['ID_M√îN'].unique()
                                rows = []
                                for mon in mon_list:
                                    df_mon = df_gd[df_gd['ID_M√îN'] == mon]
                                    if df_mon.empty:
                                        continue
                                    lop_mon = ''
                                    if input_gd is not None and 'ID_M√îN' in input_gd.columns:
                                        row_map = input_gd[input_gd['ID_M√îN'] == mon]
                                        if not row_map.empty:
                                            lop = row_map.iloc[0]['lop_hoc'] if 'lop_hoc' in row_map.columns else ''
                                            mon_name = row_map.iloc[0]['mon_hoc'] if 'mon_hoc' in row_map.columns else ''
                                            lop_mon = f"{lop} // {mon_name}"
                                    if not lop_mon:
                                        lop_mon = mon
                                    tuan_min = df_mon['Tu·∫ßn'].iloc[0] if 'Tu·∫ßn' in df_mon.columns else ''
                                    tuan_max = df_mon['Tu·∫ßn'].iloc[-1] if 'Tu·∫ßn' in df_mon.columns else ''
                                    tuan_str = f"T{tuan_min} - T{tuan_max}" if tuan_min != '' and tuan_max != '' else ''
                                    si_so = df_mon['Sƒ© s·ªë'].iloc[-1] if 'Sƒ© s·ªë' in df_mon.columns else ''
                                    tiet = df_mon['Ti·∫øt'].sum() if 'Ti·∫øt' in df_mon.columns else 0.0
                                    tiet_lt = df_mon['Ti·∫øt_LT'].sum() if 'Ti·∫øt_LT' in df_mon.columns else 0.0
                                    tiet_th = df_mon['Ti·∫øt_TH'].sum() if 'Ti·∫øt_TH' in df_mon.columns else 0.0
                                    qd_thua = df_mon['Qƒê th·ª´a'].sum() if 'Qƒê th·ª´a' in df_mon.columns else 0.0
                                    qd_thieu = df_mon['Qƒê thi·∫øu'].sum() if 'Qƒê thi·∫øu' in df_mon.columns else 0.0
                                    try:
                                        tuan_min_num = float(tuan_min)
                                        tuan_max_num = float(tuan_max)
                                        avg_tuan = (tuan_min_num + tuan_max_num) / 2
                                        hoc_ky = 2 if avg_tuan > 22 else 1
                                    except Exception:
                                        hoc_ky = 1
                                    rows.append({
                                        'L·ªõp // M√¥n': lop_mon,
                                        'Tu·∫ßn': tuan_str,
                                        'Sƒ© s·ªë': si_so,
                                        'Ti·∫øt': tiet,
                                        'Ti·∫øt LT': tiet_lt,
                                        'Ti·∫øt TH': tiet_th,
                                        'Qƒê th·ª´a': qd_thua,
                                        'Qƒê Thi·∫øu': qd_thieu,
                                        'H·ªçc k·ª≥': hoc_ky
                                    })
                                df_tonghop_mon = pd.DataFrame(rows)
                                st.subheader('‚úçÔ∏è B·∫£ng t·ªïng h·ª£p kh·ªëi l∆∞·ª£ng d·∫°y')
                                for hk in [1, 2]:
                                    df_hk = df_tonghop_mon[df_tonghop_mon['H·ªçc k·ª≥'] == hk].copy()
                                    if not df_hk.empty:
                                        for col in ['Ti·∫øt', 'Ti·∫øt LT', 'Ti·∫øt TH', 'Qƒê th·ª´a', 'Qƒê Thi·∫øu']:
                                            df_hk[col] = pd.to_numeric(df_hk[col], errors='coerce').fillna(0.0)
                                        total_row = {
                                            'L·ªõp // M√¥n': 'T·ªïng c·ªông',
                                            'Tu·∫ßn': '',
                                            'Sƒ© s·ªë': '',
                                            'Ti·∫øt': df_hk['Ti·∫øt'].sum(),
                                            'Ti·∫øt LT': df_hk['Ti·∫øt LT'].sum(),
                                            'Ti·∫øt TH': df_hk['Ti·∫øt TH'].sum(),
                                            'Qƒê th·ª´a': df_hk['Qƒê th·ª´a'].sum(),
                                            'Qƒê Thi·∫øu': df_hk['Qƒê Thi·∫øu'].sum(),
                                            'H·ªçc k·ª≥': ''
                                        }
                                        df_hk = pd.concat([df_hk, pd.DataFrame([total_row])], ignore_index=True)
                                        st.markdown(f"**B·∫£ng t·ªïng h·ª£p ti·∫øt gi·∫£ng d·∫°y quy ƒë·ªïi HK{hk}**")
                                        st.dataframe(df_hk.drop(columns=['H·ªçc k·ª≥']), use_container_width=True)
                                        if hk == 1:
                                            st.session_state['df_hk1'] = df_hk
                                        elif hk == 2:
                                            st.session_state['df_hk2'] = df_hk
                    dfs.append(df)
                    found_any = True
            if dfs:
                st.subheader(":blue[B·∫¢NG T·ªîNG H·ª¢P KH·ªêI L∆Ø·ª¢NG D∆Ø/THI·∫æU GI·ªú]")
                giochuan = st.session_state.get('giochuan', 616)
                def build_bang_tonghop(dfs, giochuan=616):
                    import numpy as np
                    tiet_giangday_hk1_qdthieu = 0
                    tiet_giangday_hk1_qdthua = 0
                    tiet_giangday_hk2_qdthieu = 0
                    tiet_giangday_hk2_qdthua = 0
                    df_hk1 = st.session_state.get('df_hk1')
                    df_hk2 = st.session_state.get('df_hk2')
                    if df_hk1 is not None and not df_hk1.empty:
                        row_total = df_hk1[df_hk1['L·ªõp // M√¥n'] == 'T·ªïng c·ªông']
                        if not row_total.empty:
                            tiet_giangday_hk1_qdthieu = row_total['Qƒê Thi·∫øu'].values[0]
                            tiet_giangday_hk1_qdthua = row_total['Qƒê th·ª´a'].values[0]
                    if df_hk2 is not None and not df_hk2.empty:
                        row_total = df_hk2[df_hk2['L·ªõp // M√¥n'] == 'T·ªïng c·ªông']
                        if not row_total.empty:
                            tiet_giangday_hk2_qdthieu = row_total['Qƒê Thi·∫øu'].values[0]
                            tiet_giangday_hk2_qdthua = row_total['Qƒê th·ª´a'].values[0]
                    if tiet_giangday_hk1_qdthieu == 0 and len(dfs) > 0 and 'Qƒê Thi·∫øu' in dfs[0]:
                        tiet_giangday_hk1_qdthieu = dfs[0]['Qƒê Thi·∫øu'].sum()
                    if tiet_giangday_hk1_qdthua == 0 and len(dfs) > 0 and 'Qƒê th·ª´a' in dfs[0]:
                        tiet_giangday_hk1_qdthua = dfs[0]['Qƒê th·ª´a'].sum()
                    if tiet_giangday_hk2_qdthieu == 0 and len(dfs) > 0 and 'Qƒê Thi·∫øu' in dfs[0]:
                        tiet_giangday_hk2_qdthieu = dfs[0]['Qƒê Thi·∫øu'].sum()
                    if tiet_giangday_hk2_qdthua == 0 and len(dfs) > 0 and 'Qƒê th·ª´a' in dfs[0]:
                        tiet_giangday_hk2_qdthua = dfs[0]['Qƒê th·ª´a'].sum()
                    ra_de_cham_thi_hk1 = 0
                    ra_de_cham_thi_hk2 = 0
                    if len(dfs) > 1:
                        df_thi = dfs[1]
                        if 'H·ªçc k·ª≥ 1 (Ti·∫øt)' in df_thi.columns:
                            ra_de_cham_thi_hk1 = pd.to_numeric(df_thi['H·ªçc k·ª≥ 1 (Ti·∫øt)'], errors='coerce').sum()
                        elif 'Ti·∫øt quy ƒë·ªïi HK1' in df_thi.columns:
                            ra_de_cham_thi_hk1 = pd.to_numeric(df_thi['Ti·∫øt quy ƒë·ªïi HK1'], errors='coerce').sum()
                        if 'H·ªçc k·ª≥ 2 (Ti·∫øt)' in df_thi.columns:
                            ra_de_cham_thi_hk2 = pd.to_numeric(df_thi['H·ªçc k·ª≥ 2 (Ti·∫øt)'], errors='coerce').sum()
                        elif 'Ti·∫øt quy ƒë·ªïi HK2' in df_thi.columns:
                            ra_de_cham_thi_hk2 = pd.to_numeric(df_thi['Ti·∫øt quy ƒë·ªïi HK2'], errors='coerce').sum()
                    giam_gio = 0
                    if len(dfs) > 2:
                        df_giam = dfs[2]
                        if 'T·ªïng ti·∫øt' in df_giam.columns:
                            giam_gio = pd.to_numeric(df_giam['T·ªïng ti·∫øt'], errors='coerce').sum()
                        elif 'S·ªë ti·∫øt gi·∫£m' in df_giam.columns:
                            giam_gio = pd.to_numeric(df_giam['S·ªë ti·∫øt gi·∫£m'], errors='coerce').sum()
                    hoatdong_nckh = 0
                    hoatdong_thuctap = 0
                    hoatdong_khac = 0
                    if len(dfs) > 3 and not dfs[3].empty:
                        df_hd = dfs[3]
                        if 'M√É NCKH' in df_hd.columns and 'Gi·ªù quy ƒë·ªïi' in df_hd.columns:
                            hoatdong_nckh = df_hd.loc[df_hd['M√É NCKH'] == 'NCKH', 'Gi·ªù quy ƒë·ªïi'].sum()
                        if 'M√£ Hƒê' in df_hd.columns and 'Gi·ªù quy ƒë·ªïi' in df_hd.columns:
                            hoatdong_thuctap = df_hd.loc[df_hd['M√£ Hƒê'] == 'HD07', 'Gi·ªù quy ƒë·ªïi'].sum()
                        if 'M√É NCKH' in df_hd.columns and 'Gi·ªù quy ƒë·ªïi' in df_hd.columns:
                            hoatdong_khac = df_hd.loc[df_hd['M√É NCKH'] == 'BT', 'Gi·ªù quy ƒë·ªïi'].sum()
                    tong_thuchien_du = tiet_giangday_hk1_qdthua + tiet_giangday_hk2_qdthua + ra_de_cham_thi_hk1 + ra_de_cham_thi_hk2 + hoatdong_nckh + hoatdong_thuctap + hoatdong_khac - giam_gio
                    tong_thuchien_thieu = tiet_giangday_hk1_qdthieu + tiet_giangday_hk2_qdthieu + ra_de_cham_thi_hk1 + ra_de_cham_thi_hk2 + hoatdong_nckh + hoatdong_thuctap + hoatdong_khac - giam_gio
                    du_gio = max(0, tong_thuchien_du - giochuan)
                    thieu_gio = max(0, giochuan - tong_thuchien_thieu)
                    chuangv = st.session_state.get('chuan_gv', 'Cƒê')
                    if chuangv in ['Cƒê', 'TC']:
                        giochuan = 594
                    elif chuangv in ['CƒêMC', 'TCMC']:
                        giochuan = 616
                    else:
                        giochuan = 594
                    if chuangv in ['Cƒê', 'CƒêMC']:
                        dinhmuc_giangday = giochuan / 44 * 32
                    elif chuangv in ['TC', 'TCMC']:
                        dinhmuc_giangday = giochuan / 44 * 36
                    else:
                        dinhmuc_giangday = giochuan / 44 * 32
                    if chuangv in ['Cƒê', 'CƒêMC']:
                        dinhmuc_nckh = giochuan / 44 * 8
                    elif chuangv in ['TC', 'TCMC']:
                        dinhmuc_nckh = giochuan / 44 * 4
                    else:
                        dinhmuc_nckh = giochuan / 44 * 8
                    dinhmuc_thuctap = giochuan / 44 * 4
                    dinhmuc_list = [round(dinhmuc_giangday, 2), '', '', '', '', '', round(dinhmuc_nckh, 2), round(dinhmuc_thuctap, 2), '']
                    dinhmuc_tongcong = sum([v for v in dinhmuc_list if isinstance(v, (int, float)) and v != ''])
                    dinhmuc_list.append(round(dinhmuc_tongcong, 2))
                    quydoi_du_list = ["", tiet_giangday_hk1_qdthua, tiet_giangday_hk2_qdthua, ra_de_cham_thi_hk1, ra_de_cham_thi_hk2, giam_gio, hoatdong_nckh, hoatdong_thuctap, hoatdong_khac]
                    quydoi_thieu_list = ["", tiet_giangday_hk1_qdthieu, tiet_giangday_hk2_qdthieu, ra_de_cham_thi_hk1, ra_de_cham_thi_hk2, giam_gio, hoatdong_nckh, hoatdong_thuctap, hoatdong_khac]
                    quydoi_du_tongcong = sum([v for v in quydoi_du_list[1:] if isinstance(v, (int, float)) and v != ''])
                    quydoi_thieu_tongcong = sum([v for v in quydoi_thieu_list[1:] if isinstance(v, (int, float)) and v != ''])
                    quydoi_du_list.append(round(quydoi_du_tongcong, 2))
                    quydoi_thieu_list.append(round(quydoi_thieu_tongcong, 2))
                    muc_list = ["(1)", "(2)", "(3)", "(4)", "(5)", "(6)", "(7)", "(8)", "(9)", ""]
                    noidung_list = [
                        "ƒê·ªãnh m·ª©c gi·∫£ng d·∫°y c·ªßa GV",
                        "Ti·∫øt gi·∫£ng d·∫°y quy ƒë·ªïi (HK1)",
                        "Ti·∫øt gi·∫£ng d·∫°y quy ƒë·ªïi (HK2)",
                        "Ra ƒë·ªÅ, Coi thi, Ch·∫•m thi (HK1)",
                        "Ra ƒë·ªÅ, Coi thi, Ch·∫•m thi (HK2)",
                        "Gi·∫£m gi·ªù Ki√™m nhi·ªám QL√Ω,GVCN...",
                        "H·ªçc t·∫≠p, b·ªìi d∆∞·ª°ng,NCKH",
                        "Th·ª±c t·∫≠p t·∫°i doanh nghi·ªáp",
                        "HD chuy√™n m√¥n kh√°c quy ƒë·ªïi",
                        "T·ªïng c·ªông"
                    ]
                    data = {
                        "M·ª§C": muc_list,
                        "N·ªòI DUNG QUY ƒê·ªîI": noidung_list,
                        "ƒê·ªãnh M·ª©c": dinhmuc_list,
                        "Quy ƒë·ªïi (D∆∞ gi·ªù)": quydoi_du_list,
                        "Quy ƒë·ªïi (Thi·∫øu gi·ªù)": quydoi_thieu_list
                    }
                    df_tonghop = pd.DataFrame(data)
                    df_tonghop = df_tonghop.where(pd.notnull(df_tonghop), '')
                    def zero_to_blank(val):
                        if val == 0 or val == 0.0:
                            return ''
                        return val
                    df_tonghop = df_tonghop.applymap(zero_to_blank)
                    return df_tonghop
                df_tonghop = build_bang_tonghop(dfs, giochuan)
                st.dataframe(df_tonghop.style.format(precision=1).set_properties(**{'text-align': 'center'}), use_container_width=True)
                st.session_state['df_all_tonghop'] = df_tonghop
                st.session_state['export_ready'] = True
            if not found_any:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë·ªÉ t·ªïng h·ª£p t·ª´ c√°c sheet 'output_'.")
        except Exception as e:
            st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ Google Sheet: {e}")

    # Ch·ªâ hi·ªÉn th·ªã n√∫t Xu·∫•t ra Excel v√† Xu·∫•t ra PDF khi ƒë√£ t·∫£i d·ªØ li·ªáu
    export_ready = st.session_state.get('export_ready', False)
    if export_ready:
        excel_tables = {}
        df_all = st.session_state.get('df_all_tonghop')
        if df_all is not None:
            excel_tables['B·∫¢NG T·ªîNG H·ª¢P'] = df_all
        sheet_names = ["output_giangday", "output_thiketthuc", "output_quydoigiam", "output_hoatdong"]
        sheet_titles = ["B·∫¢NG GI·∫¢NG D·∫†Y", "B·∫¢NG THI K·∫æT TH√öC", "B·∫¢NG GI·∫¢M TR·ª™", "B·∫¢NG HO·∫†T ƒê·ªòNG"]
        spreadsheet = st.session_state.get('spreadsheet')
        if spreadsheet is not None:
            for sname, stitle in zip(sheet_names, sheet_titles):
                try:
                    ws = next((ws for ws in spreadsheet.worksheets() if ws.title == sname), None)
                    if ws is not None:
                        df = pd.DataFrame(ws.get_all_records())
                        if not df.empty:
                            excel_tables[stitle] = df
                except Exception:
                    pass
        excel_bytes = fun_to_excel.export_tables_to_excel(excel_tables)
        with col2:
            excel_btn_placeholder.download_button("üì• Xu·∫•t ra Excel", data=excel_bytes, file_name="bao_cao_tong_hop.xlsx", use_container_width=True)
        with col3:
            if pdf_btn_placeholder.button("Xu·∫•t ra PDF", use_container_width=True):
                try:
                    from fun_to_pdf import export_to_pdf
                    df_all = st.session_state.get('df_all_tonghop')
                    if df_all is not None:
                        export_to_pdf(df_all)
                    else:
                        st.warning("Ch∆∞a c√≥ d·ªØ li·ªáu t·ªïng h·ª£p ƒë·ªÉ xu·∫•t PDF.")
                except ImportError:
                    st.error("Kh√¥ng t√¨m th·∫•y h√†m export_to_pdf trong fun_to_pdf.py. H√£y ki·ªÉm tra l·∫°i.")

def main():
    tonghop_ketqua()

if __name__ == "__main__":
    main()
