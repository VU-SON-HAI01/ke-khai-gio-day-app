import streamlit as st
import pandas as pd

# H√†m t·ªïng h·ª£p k·∫øt qu·∫£ t·ª´ c√°c trang k√™ khai
# Gi·∫£ ƒë·ªãnh d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o session_state t·ª´ c√°c trang k√™ khai

def tonghop_ketqua():
    st.title("B√°o c√°o t·ªïng h·ª£p d∆∞ gi·ªù/thi·∫øu gi·ªù")
    st.info("Trang n√†y t·ªïng h·ª£p d·ªØ li·ªáu t·ª´ c√°c trang k√™ khai v√† cho ph√©p xu·∫•t ra PDF.")

    # N√∫t t·∫£i d·ªØ li·ªáu t·ª´ Google Sheet c·ªßa user (c√°c sheet c√≥ t√™n b·∫Øt ƒë·∫ßu b·∫±ng 'output_')
    if st.button("T·∫£i d·ªØ li·ªáu c√°c b·∫£ng k√™ khai"):
        spreadsheet = st.session_state.get('spreadsheet')
        if spreadsheet is None:
            st.error("Kh√¥ng t√¨m th·∫•y file Google Sheet c·ªßa b·∫°n trong session_state. H√£y ƒëƒÉng nh·∫≠p l·∫°i ho·∫∑c li√™n h·ªá Admin.")
            return
        try:
            sheet_list = spreadsheet.worksheets()
            # ƒê·ªãnh nghƒ©a th·ª© t·ª± v√† t√™n hi·ªÉn th·ªã
            sheet_order = [
                ("output_giangday", "‚úçÔ∏è B·∫£ng t·ªïng h·ª£p kh·ªëi l∆∞·ª£ng d·∫°y"),
                ("output_thiketthuc", "üìù B·∫£ng t·ªïng h·ª£p kh·ªëi thi k·∫øt th√∫c"),
                ("output_quydoigiam", "‚öñÔ∏è B·∫£ng t·ªïng h·ª£p Gi·∫£m tr·ª´/Ki√™m nhi·ªám"),
                ("output_hoatdong", "üèÉ B·∫£ng t·ªïng h·ª£p K√™ Ho·∫°t ƒë·ªông quy ƒë·ªïi kh√°c")
            ]
            dfs = []
            found_any = False
            for idx, (sheet_name, display_name) in enumerate(sheet_order):
                ws = next((ws for ws in sheet_list if ws.title == sheet_name), None)
                if ws is not None:
                    df = pd.DataFrame(ws.get_all_records())
                    if not df.empty:
                        st.subheader(display_name)
                        st.dataframe(df)
                        # N·∫øu l√† b·∫£ng gi·∫£ng d·∫°y, hi·ªÉn th·ªã b·∫£ng t·ªïng h·ª£p chi ti·∫øt HK1
                        if sheet_name == "output_giangday":
                            import numpy as np
                            from itertools import zip_longest
                            df_gd = df.copy()
                            # G·ªôp m·ªói m√¥n th√†nh 1 d√≤ng (group theo L·ªõp h·ªçc + M√¥n h·ªçc)
                            def calculate_display_tiet(row):
                                if row.get('cach_ke') == 'K√™ theo LT, TH chi ti·∫øt':
                                    try:
                                        tiet_lt_list = [int(x) for x in str(row.get('tiet_lt', '0')).split()]
                                        tiet_th_list = [int(x) for x in str(row.get('tiet_th', '0')).split()]
                                        tiet_sum_list = [sum(pair) for pair in zip_longest(tiet_lt_list, tiet_th_list, fillvalue=0)]
                                        return ' '.join(map(str, tiet_sum_list))
                                    except ValueError:
                                        return ''
                                else:
                                    return row.get('tiet', '')
                            def calculate_total_tiet(tiet_string):
                                try:
                                    return sum(int(t) for t in str(tiet_string).split())
                                except (ValueError, TypeError):
                                    return 0
                            def get_semester(tuan_tuple):
                                try:
                                    if isinstance(tuan_tuple, tuple) and len(tuan_tuple) == 2:
                                        avg_week = (tuan_tuple[0] + tuan_tuple[1]) / 2
                                        return 1 if avg_week < 22 else 2
                                except:
                                    return 1
                                return 1
                            # X·ª≠ l√Ω c·ªôt H·ªçc k·ª≥
                            if 'tuan' in df_gd.columns:
                                df_gd['H·ªçc k·ª≥'] = df_gd['tuan'].apply(get_semester)
                            else:
                                df_gd['H·ªçc k·ª≥'] = 1
                            # G·ªôp theo L·ªõp h·ªçc + M√¥n h·ªçc + H·ªçc k·ª≥
                            group_cols = []
                            if 'lop_hoc' in df_gd.columns and 'mon_hoc' in df_gd.columns:
                                group_cols = ['lop_hoc', 'mon_hoc', 'H·ªçc k·ª≥']
                            elif 'L·ªõp h·ªçc' in df_gd.columns and 'M√¥n h·ªçc' in df_gd.columns:
                                group_cols = ['L·ªõp h·ªçc', 'M√¥n h·ªçc', 'H·ªçc k·ª≥']
                            else:
                                group_cols = ['H·ªçc k·ª≥']
                            agg_dict = {
                                'tiet_lt': lambda x: ' '.join(str(i) for i in np.sum([np.array(list(map(int, str(xx).split()))) for xx in x if str(xx).strip() != '' and str(xx) != 'nan'], axis=0)) if len(x) > 0 else '',
                                'tiet_th': lambda x: ' '.join(str(i) for i in np.sum([np.array(list(map(int, str(xx).split()))) for xx in x if str(xx).strip() != '' and str(xx) != 'nan'], axis=0)) if len(x) > 0 else '',
                                'tiet': lambda x: ' '.join(str(i) for i in np.sum([np.array(list(map(int, str(xx).split()))) for xx in x if str(xx).strip() != '' and str(xx) != 'nan'], axis=0)) if len(x) > 0 else '',
                                'Qƒê th·ª´a': 'sum',
                                'Qƒê thi·∫øu': 'sum',
                                'tuan': 'first',
                                'cach_ke': 'first'
                            }
                            # Ch·ªâ gi·ªØ c√°c c·ªôt c√≥ trong df_gd
                            agg_dict = {k: v for k, v in agg_dict.items() if k in df_gd.columns}
                            df_gd_grouped = df_gd.groupby(group_cols, as_index=False).agg(agg_dict)
                            # T√≠nh l·∫°i c√°c tr∆∞·ªùng t·ªïng h·ª£p
                            df_gd_grouped['Ti·∫øt theo tu·∫ßn'] = df_gd_grouped.apply(calculate_display_tiet, axis=1)
                            df_gd_grouped['Ti·∫øt'] = df_gd_grouped['Ti·∫øt theo tu·∫ßn'].apply(calculate_total_tiet)
                            # ƒê·ªïi t√™n c·ªôt cho ƒë·ªìng nh·∫•t
                            rename_map = {
                                'lop_hoc': 'L·ªõp h·ªçc', 'mon_hoc': 'M√¥n h·ªçc', 'tuan': 'Tu·∫ßn ƒë·∫øn Tu·∫ßn',
                                'tiet_lt': 'Ti·∫øt LT theo tu·∫ßn', 'tiet_th': 'Ti·∫øt TH theo tu·∫ßn',
                                'Qƒê th·ª´a': 'Qƒê th·ª´a', 'Qƒê thi·∫øu': 'Qƒê thi·∫øu'
                            }
                            df_gd_grouped.rename(columns=rename_map, inplace=True)
                            df_gd_grouped.insert(0, "Th·ª© t·ª±", range(1, len(df_gd_grouped) + 1))
                            display_columns = [
                                'Th·ª© t·ª±', 'L·ªõp h·ªçc', 'M√¥n h·ªçc', 'H·ªçc k·ª≥', 'Tu·∫ßn ƒë·∫øn Tu·∫ßn', 'Ti·∫øt',
                                'Ti·∫øt theo tu·∫ßn', 'Ti·∫øt LT theo tu·∫ßn', 'Ti·∫øt TH theo tu·∫ßn',
                                'Qƒê th·ª´a', 'Qƒê thi·∫øu'
                            ]
                            final_columns_to_display = [col for col in display_columns if col in df_gd_grouped.columns]
                            # Hi·ªÉn th·ªã t·ª´ng h·ªçc k·ª≥
                            for hk in [1, 2]:
                                st.subheader(f"H·ªçc k·ª≥ {hk}")
                                df_hk = df_gd_grouped[df_gd_grouped['H·ªçc k·ª≥'] == hk]
                                if not df_hk.empty:
                                    st.dataframe(df_hk[final_columns_to_display], use_container_width=True)
                                else:
                                    st.info(f"Kh√¥ng c√≥ d·ªØ li·ªáu cho H·ªçc k·ª≥ {hk}.")
                            # T·ªïng h·ª£p s·ªë li·ªáu cho metric
                            def display_totals(df):
                                total_tiet_day = df['Ti·∫øt'].sum() if 'Ti·∫øt' in df else 0
                                total_qd_thua = df['Qƒê th·ª´a'].sum() if 'Qƒê th·ª´a' in df else 0
                                return total_tiet_day, total_qd_thua
                            tiet_hk1, qd_thua_hk1 = display_totals(df_gd_grouped[df_gd_grouped['H·ªçc k·ª≥'] == 1])
                            tiet_hk2, qd_thua_hk2 = display_totals(df_gd_grouped[df_gd_grouped['H·ªçc k·ª≥'] == 2])
                            tiet_canam = tiet_hk1 + tiet_hk2
                            qd_thua_canam = qd_thua_hk1 + qd_thua_hk2
                            st.markdown("---")
                            st.subheader("T·ªïng h·ª£p kh·ªëi l∆∞·ª£ng gi·∫£ng d·∫°y c·∫£ nƒÉm:")
                            col1, col2, col3, col4, col5, col6 = st.columns(6)
                            percent_hk1 = (tiet_hk1 / tiet_canam * 100) if tiet_canam else 0
                            percent_hk2 = (tiet_hk2 / tiet_canam * 100) if tiet_canam else 0
                            col1.metric("Th·ª±c d·∫°y HK1", f"{tiet_hk1:,.0f}", delta=f"{percent_hk1:.1f}%", delta_color="normal")
                            col2.metric("Th·ª±c d·∫°y HK2", f"{tiet_hk2:,.0f}", delta=f"{percent_hk2:.1f}%", delta_color="normal")
                            col3.metric("Th·ª±c d·∫°y C·∫£ nƒÉm", f"{tiet_canam:,.0f}", delta="100%", delta_color="normal")
                            delta_hk1 = round(qd_thua_hk1 - tiet_hk1, 1)
                            delta_hk2 = round(qd_thua_hk2 - tiet_hk2, 1)
                            delta_canam = round(qd_thua_canam - tiet_canam, 1)
                            col4.metric("Gi·ªù Qƒê HK1", f"{qd_thua_hk1:,.1f}", delta=delta_hk1)
                            col5.metric("Gi·ªù Qƒê HK2", f"{qd_thua_hk2:,.1f}", delta=delta_hk2)
                            col6.metric("Gi·ªù Qƒê C·∫£ nƒÉm", f"{qd_thua_canam:,.1f}", delta=delta_canam)
                        dfs.append(df)
                        found_any = True
            if dfs:
                st.subheader(":blue[B·∫¢NG T·ªîNG H·ª¢P KH·ªêI L∆Ø·ª¢NG D∆Ø/THI·∫æU GI·ªú]")
                # L·∫•y gi·ªù chu·∫©n t·ª´ session_state n·∫øu c√≥, m·∫∑c ƒë·ªãnh 616
                giochuan = st.session_state.get('giochuan', 616)
                def build_bang_tonghop(dfs, giochuan=616):
                    # TODO: B·ªï sung logic t·ªïng h·ª£p th·ª±c t·∫ø t·ª´ c√°c b·∫£ng dfs
                    # Hi·ªán t·∫°i ch·ªâ l√† m·∫´u, s·∫Ω c·∫≠p nh·∫≠t d·∫ßn
                    import numpy as np
                    tiet_giangday_hk1 = dfs[0]['Ti·∫øt quy ƒë·ªïi HK1'].sum() if len(dfs) > 0 and 'Ti·∫øt quy ƒë·ªïi HK1' in dfs[0] else 0
                    tiet_giangday_hk2 = dfs[0]['Ti·∫øt quy ƒë·ªïi HK2'].sum() if len(dfs) > 0 and 'Ti·∫øt quy ƒë·ªïi HK2' in dfs[0] else 0
                    ra_de_cham_thi_hk1 = dfs[1]['Ti·∫øt quy ƒë·ªïi HK1'].sum() if len(dfs) > 1 and 'Ti·∫øt quy ƒë·ªïi HK1' in dfs[1] else 0
                    ra_de_cham_thi_hk2 = dfs[1]['Ti·∫øt quy ƒë·ªïi HK2'].sum() if len(dfs) > 1 and 'Ti·∫øt quy ƒë·ªïi HK2' in dfs[1] else 0
                    giam_gio = dfs[2]['S·ªë ti·∫øt gi·∫£m'].sum() if len(dfs) > 2 and 'S·ªë ti·∫øt gi·∫£m' in dfs[2] else 0
                    hoatdong_khac = dfs[3]['Ti·∫øt quy ƒë·ªïi'].sum() if len(dfs) > 3 and 'Ti·∫øt quy ƒë·ªïi' in dfs[3] else 0

                    tong_thuchien = tiet_giangday_hk1 + tiet_giangday_hk2 + ra_de_cham_thi_hk1 + ra_de_cham_thi_hk2 + hoatdong_khac - giam_gio
                    du_gio = max(0, tong_thuchien - giochuan)
                    thieu_gio = max(0, giochuan - tong_thuchien)

                    data = {
                        "M·ª§C": ["(1)", "(2)", "(3)", "(4)", "(5)", "(6)", "(7)", "(8)", "(9)", "T·ªïng c·ªông"],
                        "N·ªòI DUNG QUY ƒê·ªîI": [
                            "ƒê·ªãnh m·ª©c gi·∫£ng d·∫°y c·ªßa GV",
                            "Ti·∫øt gi·∫£ng d·∫°y quy ƒë·ªïi (HK1)",
                            "Ti·∫øt gi·∫£ng d·∫°y quy ƒë·ªïi (HK2)",
                            "Ra ƒë·ªÅ, Coi thi, Ch·∫•m thi (HK1)",
                            "Ra ƒë·ªÅ, Coi thi, Ch·∫•m thi (HK2)",
                            "Gi·∫£m gi·ªù Ki√™m nhi·ªám QL√Ω,GVCN...",
                            "H·ªçc t·∫≠p, b·ªìi d∆∞·ª°ng,NCKH",
                            "Th·ª±c t·∫≠p t·∫°i doanh nghi·ªáp",
                            "HD chuy√™n m√¥n kh√°c quy ƒë·ªïi",
                            ""
                        ],
                        "ƒê·ªãnh M·ª©c": [giochuan, None, None, None, None, None, None, None, None, giochuan],
                        "Khi D∆∞ gi·ªù": ["", tiet_giangday_hk1, tiet_giangday_hk2, ra_de_cham_thi_hk1, ra_de_cham_thi_hk2, giam_gio, None, None, hoatdong_khac, du_gio],
                        "Khi Thi·∫øu gi·ªù": ["", tiet_giangday_hk1, tiet_giangday_hk2, ra_de_cham_thi_hk1, ra_de_cham_thi_hk2, giam_gio, None, None, hoatdong_khac, thieu_gio]
                    }
                    df_tonghop = pd.DataFrame(data)
                    return df_tonghop

                df_tonghop = build_bang_tonghop(dfs, giochuan)
                st.dataframe(df_tonghop.style.format(precision=1).set_properties(**{'text-align': 'center'}), use_container_width=True)
                st.session_state['df_all_tonghop'] = df_tonghop
            if not found_any:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë·ªÉ t·ªïng h·ª£p t·ª´ c√°c sheet 'output_'.")
        except Exception as e:
            st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ Google Sheet: {e}")

    # N√∫t xu·∫•t PDF
    if st.button("Xu·∫•t ra PDF"):
        try:
            from fun_to_pdf import export_to_pdf
            df_all = st.session_state.get('df_all_tonghop')
            if df_all is not None:
                export_to_pdf(df_all)
            else:
                st.warning("Ch∆∞a c√≥ d·ªØ li·ªáu t·ªïng h·ª£p ƒë·ªÉ xu·∫•t PDF.")
        except ImportError:
            st.error("Kh√¥ng t√¨m th·∫•y h√†m export_to_pdf trong fun_to_pdf.py. H√£y ki·ªÉm tra l·∫°i.")

def main():
    tonghop_ketqua()

if __name__ == "__main__":
    main()
