import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime

# --- C·∫§U H√åNH V√Ä H·∫∞NG S·ªê ---
# ID c·ªßa Google Sheet b·∫°n cung c·∫•p
GOOGLE_SHEET_ID = "1Hui1E7dRRluQudoyUmwat1clzm9hH_F66gh4ulBtV04"
# T√™n c·ªßa sheet g·ªëc ch·ª©a m·∫´u phi·∫øu
SHEET_GOC_NAME = "TRANG_GOC"

# --- K·∫æT N·ªêI GOOGLE SHEETS ---
@st.cache_resource
def connect_to_gsheet():
    """K·∫øt n·ªëi t·ªõi Google Sheets s·ª≠ d·ª•ng service account credentials t·ª´ Streamlit Secrets."""
    try:
        creds_dict = st.secrets["gcp_service_account"]
        scopes = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive.file"
        ]
        creds = Credentials.from_service_account_info(creds_dict, scopes=scopes)
        return gspread.authorize(creds)
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi Google Sheets: {e}")
        return None

@st.cache_data(ttl=600)
def load_data_from_sheet(_gsheet_client, sheet_id, sheet_name):
    """T·∫£i d·ªØ li·ªáu t·ª´ m·ªôt sheet c·ª• th·ªÉ."""
    if _gsheet_client is None:
        return pd.DataFrame()
    try:
        spreadsheet = _gsheet_client.open_by_key(sheet_id)
        worksheet = spreadsheet.worksheet(sheet_name)
        data = worksheet.get_all_values()
        # B·ªè qua c√°c h√†ng tr·ªëng ·ªü ƒë·∫ßu n·∫øu c√≥
        first_row_with_data = 0
        for i, row in enumerate(data):
            if any(row):
                first_row_with_data = i
                break
        return pd.DataFrame(data[first_row_with_data:])
    except gspread.exceptions.WorksheetNotFound:
        # st.error(f"Kh√¥ng t√¨m th·∫•y sheet v·ªõi t√™n '{sheet_name}'. Vui l√≤ng ki·ªÉm tra l·∫°i.")
        return None
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ sheet '{sheet_name}': {e}")
        return None

# --- H√ÄM H·ªñ TR·ª¢ ---
def parse_value_from_string(text, prefix):
    """Tr√≠ch xu·∫•t gi√° tr·ªã t·ª´ m·ªôt chu·ªói c√≥ ti·ªÅn t·ªë, v√≠ d·ª•: '- H·ªç v√† t√™n: ABC' -> 'ABC'."""
    if isinstance(text, str) and text.startswith(prefix):
        return text[len(prefix):].strip()
    return text if isinstance(text, str) else ""

def get_evaluation_criteria(df):
    """L·∫•y danh s√°ch c√°c n·ªôi dung v√† ƒëi·ªÉm t·ªëi ƒëa ƒë·ªÉ ƒë√°nh gi√°."""
    try:
        start_row_index = df[df[0] == 'STT'].index[0]
        end_row_index = df[df[1].str.contains("T·ªïng ƒëi·ªÉm", na=False)].index[0]
        criteria_df = df.iloc[start_row_index + 1 : end_row_index].copy()
        criteria_df = criteria_df[[1, 3]].dropna(how='all')
        criteria_df.columns = ["noi_dung", "diem_toi_da"]
        criteria_df = criteria_df[pd.to_numeric(criteria_df['diem_toi_da'], errors='coerce').notna()]
        criteria_df['diem_toi_da'] = pd.to_numeric(criteria_df['diem_toi_da'])
        return criteria_df
    except (IndexError, KeyError):
        st.warning("Kh√¥ng th·ªÉ ph√¢n t√≠ch c·∫•u tr√∫c b·∫£ng ƒëi·ªÉm t·ª´ sheet `TRANG_GOC`.")
        return pd.DataFrame(columns=["noi_dung", "diem_toi_da"])

def classify_score(score):
    """Ph√¢n lo·∫°i k·∫øt qu·∫£ d·ª±a tr√™n t·ªïng ƒëi·ªÉm."""
    if score >= 90:
        return "Ho√†n th√†nh xu·∫•t s·∫Øc nhi·ªám v·ª•"
    elif score >= 70:
        return "Ho√†n th√†nh t·ªët nhi·ªám v·ª•"
    elif score >= 50:
        return "Ho√†n th√†nh nhi·ªám v·ª•"
    else:
        return "Kh√¥ng ho√†n th√†nh nhi·ªám v·ª•"

# --- N·ªòI DUNG TRANG ƒê√ÅNH GI√Å ---
def render_evaluation_page():
    """Hi·ªÉn th·ªã n·ªôi dung trang d·ª±a tr√™n vai tr√≤ c·ªßa ng∆∞·ªùi d√πng."""
    username = st.session_state.get("username", "user")
    role = st.session_state.get("role", "user")

    gsheet_client = connect_to_gsheet()
    if gsheet_client is None: return

    if role == "admin":
        st.title("üìä Trang qu·∫£n tr·ªã vi√™n")
        st.header("Danh s√°ch c√°c phi·∫øu ƒë√£ ƒë√°nh gi√°")
        try:
            spreadsheet = gsheet_client.open_by_key(GOOGLE_SHEET_ID)
            all_sheets = [s.title for s in spreadsheet.worksheets() if s.title != SHEET_GOC_NAME]
            if not all_sheets:
                st.info("Ch∆∞a c√≥ phi·∫øu ƒë√°nh gi√° n√†o ƒë∆∞·ª£c n·ªôp.")
                return
            selected_sheet = st.selectbox("Ch·ªçn phi·∫øu ƒë·ªÉ xem:", all_sheets)
            if selected_sheet:
                df_view = load_data_from_sheet(gsheet_client, GOOGLE_SHEET_ID, selected_sheet)
                if df_view is not None:
                    st.dataframe(df_view)
        except Exception as e:
            st.error(f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch c√°c sheet: {e}")
    else:
        st.title("üìù PHI·∫æU ƒê√ÅNH GI√Å, X·∫æP LO·∫†I CH·∫§T L∆Ø·ª¢NG THEO TH√ÅNG")
        
        df_goc = load_data_from_sheet(gsheet_client, GOOGLE_SHEET_ID, SHEET_GOC_NAME)
        if df_goc is None or df_goc.empty:
            st.error("Kh√¥ng t·∫£i ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ `TRANG_GOC`.")
            return

        df_criteria = get_evaluation_criteria(df_goc)
        if df_criteria.empty: return

        current_month = datetime.now().month
        current_year = datetime.now().year
        selected_month = st.selectbox("Ch·ªçn th√°ng ƒë√°nh gi√°:", range(1, 13), index=current_month - 1)
        selected_year = st.number_input("NƒÉm:", value=current_year)

        # --- T·∫£i d·ªØ li·ªáu ƒë·ªông ---
        ho_ten_val = "V≈© S∆°n H·∫£i"
        chuc_vu_val = "Nh√¢n vi√™n"
        don_vi_val = "Ph√≤ng ƒê√†o t·∫°o, NCKH v√† QHQT"
        nhiem_vu_val = (
            "- Qu·∫£n tr·ªã website, c·∫≠p nh·∫≠t th√¥ng tin, b√†i vi·∫øt\n"
            "- C√°c ho·∫°t ƒë·ªông li√™n quan ƒë·∫øn truy·ªÅn th√¥ng Nh√† tr∆∞·ªùng\n"
            "- C·∫≠p nh·∫≠t ph·∫ßn m·ªÅm K√™ gi·ªù nƒÉm h·ªçc 2024 ‚Äì 2025\n"
            "- Tham gia ho√†n thi·ªán ƒë·ªÅ t√†i X√¢y d·ª±ng video truy·ªÅn th√¥ng, gi·ªõi thi·ªáu v·ªÅ Tr∆∞·ªùng Cao ƒë·∫±ng ƒê·∫Øk L·∫Øk\n"
            "- C√°c ho·∫°t ƒë·ªông kh√°c c·ªßa Ph√≤ng"
        )
        diem_tu_cham_defaults = [float(row['diem_toi_da']) for _, row in df_criteria.iterrows()]

        sheet_name_to_load = f"THANG_{selected_month}_{selected_year}_{username}"
        df_existing = load_data_from_sheet(gsheet_client, GOOGLE_SHEET_ID, sheet_name_to_load)

        if df_existing is not None and not df_existing.empty:
            st.info(f"ƒê√£ t√¨m th·∫•y v√† t·∫£i d·ªØ li·ªáu t·ª´ phi·∫øu c·ªßa th√°ng {selected_month}/{selected_year}.")
            ho_ten_val = parse_value_from_string(df_existing.iloc[5, 0], "- H·ªç v√† t√™n:")
            chuc_vu_val = parse_value_from_string(df_existing.iloc[6, 0], "- Ch·ª©c v·ª•:")
            don_vi_val = parse_value_from_string(df_existing.iloc[7, 0], "- ƒê∆°n v·ªã c√¥ng t√°c:")
            nhiem_vu_val = df_existing.iloc[9, 0]

            start_row_index = df_goc[df_goc[0] == 'STT'].index[0] + 1
            loaded_scores = []
            for i in range(len(df_criteria)):
                try:
                    score = df_existing.iloc[start_row_index + i, 4]
                    loaded_scores.append(float(score))
                except (ValueError, TypeError, IndexError):
                    loaded_scores.append(float(df_criteria.iloc[i]['diem_toi_da']))
            diem_tu_cham_defaults = loaded_scores
        else:
            st.info(f"Ch∆∞a c√≥ phi·∫øu cho th√°ng {selected_month}/{selected_year}. ƒêang t·∫°o phi·∫øu m·ªõi t·ª´ m·∫´u.")

        # --- Hi·ªÉn th·ªã Giao di·ªán ---
        st.header("A. TH√îNG TIN C√Å NH√ÇN")
        ho_ten_input = st.text_input("- H·ªç v√† t√™n:", value=ho_ten_val)
        chuc_vu_input = st.text_input("- Ch·ª©c v·ª•:", value=chuc_vu_val)
        don_vi_input = st.text_input("- ƒê∆°n v·ªã c√¥ng t√°c:", value=don_vi_val)

        st.header("I. Nhi·ªám v·ª• ƒë∆∞·ª£c ph√¢n c√¥ng trong th√°ng:")
        nhiem_vu_input = st.text_area("Li·ªát k√™ nhi·ªám v·ª•:", value=nhiem_vu_val, height=150)
            
        st.header("II. T·ª∞ CH·∫§M ƒêI·ªÇM, X·∫æP LO·∫†I CH·∫§T L∆Ø·ª¢NG H√ÄNG TH√ÅNG")
        
        with st.form("evaluation_form"):
            diem_tu_cham_list = []
            for i, (index, row) in enumerate(df_criteria.iterrows()):
                st.markdown(f"**{row['noi_dung']}** (T·ªëi ƒëa: {row['diem_toi_da']})")
                diem = st.number_input(
                    f"ƒêi·ªÉm t·ª± ch·∫•m cho m·ª•c {index+1}",
                    min_value=0.0, max_value=float(row['diem_toi_da']),
                    value=diem_tu_cham_defaults[i], step=0.5, key=f"diem_{index}"
                )
                diem_tu_cham_list.append(diem)
            
            submitted = st.form_submit_button("N·ªôp phi·∫øu ƒë√°nh gi√°")

            if submitted:
                total_score = sum(diem_tu_cham_list)
                xep_loai = classify_score(total_score)
                
                st.subheader("K·∫æT QU·∫¢ T·ª∞ X·∫æP LO·∫†I")
                st.metric(label="T·ªïng ƒëi·ªÉm t·ª± ch·∫•m", value=f"{total_score:.2f}")
                st.success(f"**T·ª± x·∫øp lo·∫°i:** {xep_loai}")

                sheet_name_to_save = f"THANG_{selected_month}_{selected_year}_{username}"
                try:
                    spreadsheet = gsheet_client.open_by_key(GOOGLE_SHEET_ID)
                    try:
                        worksheet = spreadsheet.worksheet(sheet_name_to_save)
                        worksheet.clear()
                    except gspread.WorksheetNotFound:
                        worksheet = spreadsheet.add_worksheet(title=sheet_name_to_save, rows=100, cols=20)
                    
                    data_to_write = df_goc.values.tolist()
                    data_to_write[4][0] = f"Th√°ng: {selected_month}/{selected_year}"
                    data_to_write[5][0] = f"- H·ªç v√† t√™n: {ho_ten_input}"
                    data_to_write[6][0] = f"- Ch·ª©c v·ª•: {chuc_vu_input}"
                    data_to_write[7][0] = f"- ƒê∆°n v·ªã c√¥ng t√°c: {don_vi_input}"
                    
                    task_start_row = 9
                    data_to_write[task_start_row][0] = nhiem_vu_input
                    for i in range(1, 5):
                        if task_start_row + i < len(data_to_write):
                            data_to_write[task_start_row + i][0] = ""
                    
                    start_row_index = df_goc[df_goc[0] == 'STT'].index[0] + 1
                    for i, diem in enumerate(diem_tu_cham_list):
                        data_to_write[start_row_index + i][4] = diem

                    end_row_index = df_goc[df_goc[1].str.contains("T·ªïng ƒëi·ªÉm", na=False)].index[0]
                    data_to_write[end_row_index][4] = total_score
                    
                    self_ranking_row_index = df_goc[df_goc[0].str.contains("T·ª± x·∫øp lo·∫°i", na=False)].index[0]
                    data_to_write[self_ranking_row_index][0] = f"- T·ª± x·∫øp lo·∫°i: {xep_loai}"
                    
                    worksheet.update(data_to_write, value_input_option='USER_ENTERED')
                    st.success(f"ƒê√£ l∆∞u phi·∫øu ƒë√°nh gi√° v√†o sheet '{sheet_name_to_save}' th√†nh c√¥ng!")
                except Exception as e:
                    st.error(f"ƒê√£ x·∫£y ra l·ªói khi l∆∞u v√†o Google Sheet: {e}")

# --- LU·ªíNG CH·∫†Y CH√çNH ---
render_evaluation_page()

